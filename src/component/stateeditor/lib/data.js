var data = {"windows": {}, "linux": {"npm": {"parameter": {"name": {"default": "", "required": true, "type": "dict", "value": ["latest", "removed"]}}, "reference": {"en": "\n### Description\n\tensure node.js packages are installed\n\n### Parameters\n\n*   **name** (*required*): the package names and versions. You can specify multiple pakages. The following values can be used for package version:\n\t- <***empty***> (*default*): ensure the package is present. If not, will install the latest version available of all APT repos on                   \n\t- <***version***>: ensure the package is present, with the version specified. If the version in unavailable of all APT repos on the host, the state will fail\n\t- **latest**: ensure the package is present with the latest version. If a newer version is available of all APT repos on the host, will do a auto-upgrade\n\t- **removed**: ensure the package is absent\n\t- **purged**: ensure the package is absent, and also delete all related configuration data of the package\n\t\t\t\t\t", "cn": ""}, "module": "package.npm.package", "distro": null}, "fs": {"parameter": {"force": {"default": true, "required": false, "type": "bool"}, "opts": {"required": false, "type": "line"}, "dev": {"required": true, "type": "line"}, "filesystem": {"required": true, "type": "line", "option": ["ext2", "ext3", "ext4", "btrfs", "reiserfs", "xfs", "zfs"]}}, "reference": {"en": "\n### Description\n    manage the filesystem\n    \n### Parameters\n\n*   **dev** (*required*): the device name\n        example:\n            /dev/sda1\n\n*   **filesystem** (*required*): the filesystem type of the device    \n\n*   **force** (*optional*): forcefully create the new filesystem, even if there is already one on the specified device, by default *False*\n\n*   **opts** (*optional*): additional options for creating the filesystem, see *MKE2FS(8)*\n            example:\n                -O journal_dev [ -b block-size ] [ -L volume-label ] [ -n ] [ -q ] [ -v ]  external-journal [ blocks-count ]\n\t\t\t\t\t", "cn": ""}, "module": "sys.fs", "distro": null}, "raid": {}, "supervisord": {"parameter": {"config": {"required": true, "type": "line"}, "watch": {"required": false, "type": "array"}, "name": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n    manage the Supervisord service\n    \n### Parameters\n\n*   **name** (*required*): the service name\n        example:\n            httpd\n\n*   **config** (*required*): the path of supervisord configuration file\n        example:\n            /etc/supervisord\n\n        note:\n            When this file is modified, supervisord will be restarted, which causes all managed services restarted\n\n*   **watch** (*optional*): watch a list of files or directories, restart the service if any of them is modified\n        example:\n            /etc/nginx/nginx.conf, /etc/my.cnf\n\t\t\t\t\t", "cn": ""}, "module": "service.supervisord", "distro": null}, "ntp": {}, "upstart": {"parameter": {"watch": {"required": false, "type": "array"}, "name": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n    manage the Upstart service\n    \n### Parameters\n\n*   **name** (*required*): the service name\n        example:\n            httpd\n\n*   **watch** (*optional*): watch a list of files or directories, restart the service if any of them is modified\n        example:\n            /etc/nginx/nginx.conf, /etc/my.cnf\n\t\t\t\t\t", "cn": ""}, "module": "service.upstart", "distro": ["debian", "ubuntu"]}, "yum.repo": {"parameter": {"content": {"required": true, "type": "line"}, "name": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tensure rpm packages are installed\n\n### Parameters\n\n*   **name** (*required*): the repo name\n\t\t   epel\n \n* **content** (*required*): the content of the repo configuration file \n\t\t[10gen]\n\t\tname=10gen Repository\n\t\tbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686\n\t\tgpgcheck=0\n\t\tenabled=1\n\t\t\t\t\t", "cn": ""}, "module": "package.yum.repo", "distro": ["amazon", "redhat", "centos"]}, "dir": {"parameter": {"path": {"required": true, "type": "line"}, "recursive": {"default": true, "required": false, "type": "bool"}, "group": {"required": false, "type": "line"}, "user": {"required": false, "type": "line"}, "mode": {"default": "0755", "required": false, "type": "line"}}, "reference": {"en": "\n### Description\n\tmanage the specified directory\n\n### Parameters\n\n*   **path** (*required*): the directory path\n\t\texample:\n\t\t\t/var/www/html\n\n\t\tnote:\n\t\t\tThis state ensures the specifed directory is present with correposnding attributes. If the parent directory is present, its attributes will be left unchanged, otherwise it will be created with the same attributed of the specified directory itself.\n \n* **user** (*optional*): the user name of the directory owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the directory owner will be set to this user. Otherwise, the result depends on whether the directory exists. If so, the directory owner will be left unchanged. If not, the directory will be created under the user name of which the Madeira agent runs.\n\n* **group** (*optional*): the group name of the directory owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the directory will be set to this group. Otherwise, the result depends on whether the directory exists. If so, the directory group will be left unchanged. If not, the directory will be created under the group of which the Madeira agent runs.\n\n* **mode** (*optional*): the directory mode\n\t\texample:\n\t\t\t0755\n\t\n\t\tnote:\n\t\t\tIf specified, the directory will be set to this mode. Otherwise, the result depends on whether the directory exists. If so, the directory mode will be left unchanged. If not, the directory will be created with the default mode 0755\n\n* **recursive** (*optional*): whehther to recursively set attributes of all sub-directories under *path*, by default ***True***\n\t\t\t\t\t", "cn": ""}, "module": "path.dir", "distro": null}, "symlink": {"parameter": {"source": {"required": true, "type": "line"}, "target": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tmanage a symlink\n\n### Parameters\n\n*   **source** (*required*): the path to link to\n\t\texample:\n\t\t\t/data/\n \n* **target** (*required*): the path to the symlink\n\t\texample:\n\t\t\t/mnt/data/\n\t\n\t\tnote:\n\t\t\tIf the target's parent path does not exist, this state will fail.\n\t\t\t\t\t", "cn": ""}, "module": "path.symlink", "distro": null}, "zypper.repo": {"parameter": {"url": {"required": true, "type": "line"}, "name": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tensure a zypper is present and enabled\n\n### Parameters\n\n*   **name** (*required*): the repo name\n\t\t   packman\n \n\n* **url** (*required*): the repo url\n\t\thttp://ftp.gwdg.de/pub/linux/packman/suse/13.1/\n\t\t\t\t\t", "cn": ""}, "module": "package.zypper.repo", "distro": ["opensuse", "suse"]}, "cron": {"parameter": {"username": {"required": true, "type": "line"}, "hour": {"required": false, "type": "line", "option": ["*"]}, "cmd": {"required": true, "type": "line"}, "day of week": {"required": false, "type": "line", "option": ["*"]}, "month": {"required": false, "type": "line", "option": ["*"]}, "day of month": {"required": false, "type": "line", "option": ["*"]}, "minute": {"required": false, "type": "line", "option": ["*"]}}, "reference": {"en": "\n### Description\n    manage the cron jobs\n    \n### Parameters\n\n*   **username** (*optional*): the user to execute the cron job\n        note:\n            if blank, use will use root by default\n\n*   **cmd** (*required*): the command to execute\n        example:\n            cat /proc/meminfo >> /tmp/meminfo\n\n*   **minute** (*optional*): 0 - 59\n\n*   **hour** (*optional*): 0 - 23 (must be a valid day if a month is specified)\n\n*   **day of month** (*optional*): 1 - 31\n\n*   **month** (*optional*): 1 - 12\n\n*   **day of week** (*optional*): 0 - 7, sunday is represented by 0 or 7, monday by 1\n\t\t\t\t\t", "cn": ""}, "module": "sys.cron", "distro": null}, "sysvinit": {"parameter": {"watch": {"required": false, "type": "array"}, "name": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n    manage the SysV service\n    \n### Parameters\n\n*   **name** (*required*): the service name\n        example:\n            httpd\n\n*   **watch** (*optional*): watch a list of files or directories, restart the service if any of them is modified\n        example:\n            /etc/nginx/nginx.conf, /etc/my.cnf\n\t\t\t\t\t", "cn": ""}, "module": "service.sysvinit", "distro": ["amazon", "redhat", "centos"]}, "ssh": {}, "cmd": {"parameter": {"bin": {"default": "bin/sh", "required": false, "type": "line", "option": ""}, "with_path": {"required": false, "type": "line"}, "group": {"required": false, "type": "line"}, "user": {"required": false, "type": "line"}, "timeout": {"default": 600, "required": true, "type": "line"}, "env": {"required": false, "type": "dict"}, "without_path": {"required": false, "type": "line"}, "cmd": {"required": true, "type": "line"}, "cwd": {"default": "/madeira/tmp/", "required": false, "type": "line"}}, "reference": {"en": "\n### Description\n    execute a shell command\n    \n### Parameters\n\n*   **cmd** (*required*): the command to execute\n        example:\n            find . -name *.pyc | xargs rm\n\n*   **cwd** (*optional*): the current working directory to execute the command, be default */madeira/tmp/*\n\n*   **user** (*optional*): the user to execute the command, be default the user which the agent runs as\n\n*   **group** (*optional*): the group to execute the command, be default the group which the agent runs as\n\n*   **env** (*optional*): environment variables for the command\n\n*   **timeout** (*optional*): command timeout, by default *600* (in seconds)\n        note:\n            By default, a command will be terminated and taken \"failed\" if not finishe in 600 seconds. However you can change with    this option.\n\n*   **with_path** (*optional*): the command will not run if the specified path exists\n\n*   **without_path** (*optional*): the command will not run if the specified path does not exist\n\t\t\t\t\t", "cn": ""}, "module": "sys.cmd", "distro": null}, "user": {"parameter": {"username": {"required": true, "type": "line"}, "gid": {"required": false, "type": "line"}, "uid": {"required": false, "type": "line"}, "groups": {"required": false, "type": "array"}, "home": {"default": "/home/$username", "required": false, "type": "line"}, "fullname": {"required": false, "type": "line"}, "password": {"required": true, "type": "line"}, "nologin": {"default": false, "required": false, "type": "bool"}}, "reference": {"en": "\n### Description\n    manage the user\n    \n### Parameters\n\n*   **username** (*required*): the user name\n\n*   **password** (*required*): the encrypted value of the password\n        note:\n            use \"openssl passwd -salt <salt> -1 <plaintext>\" to generate the passworld hash\n\n*   **fullname** (*optional*): the full name of the user\n\n*   **uid** (*optional*): the user id\n\n*   **gid** (*optional*): the group id\n\n*   **home** (*optional*): the home directory of the user\n        note:\n            if the directory already exists, the user and group of the directory will be set to this user; otherwise, the directory (and its parent directories) will be created, with the user and group of the user.\n\n*   **nologin** (*optional*): whether to allow user to login, by default *False*\n\n*   **groups** (*optional*): a list of groups of the user\n        note:\n            if pass in an empty list, all groups of the user will be removed except the defaut one\n\t\t\t\t\t", "cn": ""}, "module": "sys.user", "distro": null}, "file": {"parameter": {"content": {"required": true, "type": "text"}, "path": {"required": true, "type": "line"}, "group": {"required": false, "type": "line"}, "user": {"required": true, "type": "line"}, "mode": {"default": "0755", "required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tmanage the specified file\n\n### Parameters\n\n*   **path** (*required*): the file path\n\t\texample:\n\t\t\t/root/.ssh/known_hosts\n\n\t\tnote:\n\t\t\tThis state ensures the specifed file is present with correposnding attributes and content. If the directory is present, its attributes will be left unchanged, otherwise it will be created with the same attributed of the specified file itself.\n \n* **user** (*optional*): the user name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file owner will be set to this user. Otherwise, the result depends on whether the file exists. If so, the file owner will be left unchanged. If not, the file will be created under the user name of which the Madeira agent runs.\n\n* **group** (*optional*): the group name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this group. Otherwise, the result depends on whether the file exists. If so, the file group will be left unchanged. If not, the file will be created under the group of which the Madeira agent runs.\n\n* **mode** (*optional*): the directory mode\n\t\texample:\n\t\t\t0755\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this mode. Otherwise, the result depends on whether the file exists. If so, the file mode will be left unchanged. If not, the file will be created with the default mode 0755\n\n* **content** (*required*): the file content\n\t\tnote:\n\t\t\tIf the specified file exists, the file will be reset, otherwise the file will be created with this content\n\t\t\t\t\t", "cn": ""}, "module": "path.file", "distro": null}, "pip": {"parameter": {"name": {"default": "", "required": true, "type": "dict", "value": ["latest", "removed"]}}, "reference": {"en": "\n### Description\n\tensure pip packages are installed\n\n### Parameters\n\n*   **name** (*required*): the package names and versions. You can specify multiple pakages. The following values can be used for package version:\n\t- <***empty***> (*default*): ensure the package is present. If not, will install the latest version available of all APT repos on                   \n\t- <***version***>: ensure the package is present, with the version specified. If the version in unavailable of all APT repos on the host, the state will fail\n\t- **latest**: ensure the package is present with the latest version. If a newer version is available of all APT repos on the host, will do a auto-upgrade\n\t- **removed**: ensure the package is absent\n\t- **purged**: ensure the package is absent, and also delete all related configuration data of the package\n\t\t\t\t\t", "cn": ""}, "module": "package.pip.package", "distro": null}, "hg": {"parameter": {"repo": {"required": true, "type": "line"}, "force": {"default": false, "required": false, "type": "bool"}, "group": {"required": false, "type": "line"}, "user": {"required": false, "type": "line"}, "branch": {"default": "default", "required": true, "type": "line"}, "path": {"required": true, "type": "line"}, "mode": {"default": "0755", "required": false, "type": "line"}, "ssh_key": {"required": false, "type": "line"}, "revision": {"default": "", "required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tmanage the hg repo\n\t\n### Parameters\n\n*   **repo** (*required*): the hg repository uri\n\t\texample:\n\t\t\tlocal - /path/to/repo\n\t\t\tssh - ssh://user@server/path/to/repo\n\t\t\thttp/https - https://example.com/path/to/repo\n\n* **branch** (*optional*): the branch to checkout\n\t\texample:\n\t\t\tdefault\n\t\n\t\tnote:\n\t\t\tWhen using <branch>, the local repo will be kept synchronized with the latest commit of the specified branch.\n\t\t\tDo NOT use <branch> and <version> at the same time\n\n* **revision** (*optional*): the version to checkout\n\t\texample:\n\t\t\ttag name - release-1.0\n\t\t\tchangeset - 8b1e0f7e499f9af07eed5ba6a3fc5490e72631b6\n\t\n\t\tnote:\n\t\t\tWhen using <version>, the local repo will remain the specified tag or commit.\n\t\t\tDo NOT use <branch> and <version> at the same time\n\n* **ssh_key** (*optional*): the path of the ssh keypair file\n\t\texample:\n\t\t\t/root/.ssh/id_rsa\n\n* **path** (*required* ): the path to clone the repo\n\t\texample:\n\t\t\t/var/www/mysite/\n\n* **user** (*optional*): the user name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file owner will be set to this user. Otherwise, the result depends on whether the file exists. If so, the file owner will be left unchanged. If not, the file will be created under the user name of which the Madeira agent runs.\n\n* **group** (*optional*): the group name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this group. Otherwise, the result depends on whether the file exists. If so, the file group will be left unchanged. If not, the file will be created under the group of which the Madeira agent runs.\n\n* **mode** (*optional*): the directory mode\n\t\texample:\n\t\t\t0755\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this mode. Otherwise, the result depends on whether the file exists. If so, the file mode will be left unchanged. If not, the file will be created with the default mode 0755\n\n* **force** (*optional*): force the checkout even if there is conflict, by default ***False***\n\t\t\t\t\t", "cn": ""}, "module": "scm.hg", "distro": null}, "gem": {"parameter": {"name": {"default": "", "required": true, "type": "dict", "option": ["latest", "removed"]}}, "reference": {"en": "\n### Description\n\tensure ruby gems are installed\n\n### Parameters\n\n*   **name** (*required*): the package names and versions. You can specify multiple pakages. The following values can be used for package version:\n\t- <***empty***> (*default*): ensure the package is present. If not, will install the latest version available of all APT repos on                   \n\t- <***version***>: ensure the package is present, with the version specified. If the version in unavailable of all APT repos on the host, the state will fail\n\t- **latest**: ensure the package is present with the latest version. If a newer version is available of all APT repos on the host, will do a auto-upgrade\n\t- **removed**: ensure the package is absent\n\t- **purged**: ensure the package is absent, and also delete all related configuration data of the package\n\t\t\t\t\t", "cn": ""}, "module": "package.gem.package", "distro": null}, "svn": {"parameter": {"username": {"required": false, "type": "line"}, "force": {"default": false, "required": false, "type": "bool"}, "group": {"required": false, "type": "line"}, "user": {"required": false, "type": "line"}, "branch": {"default": "master", "required": true, "type": "line"}, "path": {"required": true, "type": "line"}, "mode": {"default": "0755", "required": false, "type": "line"}, "password": {"required": false, "type": "line"}, "uri": {"required": true, "type": "line"}, "revision": {"default": "", "required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tmanage the hg repo\n\t\n### Parameters\n\n*   **repo** (*required*): the hg repository uri\n\t\texample:\n\t\t\tlocal - file:///path/to/repo\n\t\t\thttp - http://example.com/path/to/repo\n\t\t\thttps - https://example.com/path/to/repo\n\t\t\tsvn - svn://example.com/path/to/repo\n\t\t\tsvn+ssh - svn+ssh://user@example.com/path/to/repo\n\n* **branch** (*optional*): the branch to checkout\n\t\texample:\n\t\t\tmaster\n\t\n\t\tnote:\n\t\t\tWhen using <branch>, the local repo will be kept synchronized with the latest commit of the specified branch.\n\t\t\tDo NOT use <branch> and <version> at the same time\n\n* **revision** (*optional*): the version to checkout\n\t\texample:\n\t\t\ttag name - release-1.0\n\t\t\tchangeset - 8b1e0f7e499f9af07eed5ba6a3fc5490e72631b6\n\t\n\t\tnote:\n\t\t\tWhen using <version>, the local repo will remain the specified tag or commit.\n\t\t\tDo NOT use <branch> and <version> at the same time\n\n* **username** (*optional*): the username of the svn server\n\n* **password** (*optional*): the password of the svn user\n\n* **path** (*required* ): the path to checkout the repo\n\t\texample:\n\t\t\t/var/www/mysite/\n\n* **user** (*optional*): the user name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file owner will be set to this user. Otherwise, the result depends on whether the file exists. If so, the file owner will be left unchanged. If not, the file will be created under the user name of which the Madeira agent runs.\n\n* **group** (*optional*): the group name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this group. Otherwise, the result depends on whether the file exists. If so, the file group will be left unchanged. If not, the file will be created under the group of which the Madeira agent runs.\n\n* **mode** (*optional*): the directory mode\n\t\texample:\n\t\t\t0755\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this mode. Otherwise, the result depends on whether the file exists. If so, the file mode will be left unchanged. If not, the file will be created with the default mode 0755\n\n* **force** (*optional*): force the checkout even if there is conflict, by default ***False***\n\t\t\t\t\t", "cn": ""}, "module": "scm.svn", "distro": null}, "git": {"parameter": {"repo": {"required": true, "type": "line"}, "force": {"default": false, "required": false, "type": "bool"}, "version": {"default": "", "required": false, "type": "line"}, "group": {"required": false, "type": "line"}, "user": {"required": false, "type": "line"}, "branch": {"default": "master", "required": false, "type": "line"}, "path": {"required": true, "type": "line"}, "ssh_key": {"required": false, "type": "line"}, "mode": {"default": "0755", "required": false, "type": "line"}}, "reference": {"en": "\n### Description\n\tmanage the git repo\n\t\n### Parameters\n\n*   **repo** (*required*): the git repository uri\n\t\texample:\n\t\t\tlocal - /opt/git/project.git or file:///opt/git/project.git\n\t\t\tssh - ssh://user@server/project.git\n\t\t\thttp/https - https://example.com/gitproject.git\n\t\t\tgit - git://example.com/gitproject.git\n\n* **branch** (*optional*): the branch to checkout\n\t\texample:\n\t\t\tmaster\n\t\n\t\tnote:\n\t\t\tWhen using <branch>, the local repo will be kept synchronized with the latest commit of the specified branch.\n\t\t\tDo NOT use <branch> and <version> at the same time\n\n* **version** (*optional*): the version to checkout\n\t\texample:\n\t\t\ttag name - release-1.0\n\t\t\tcommit id - 8b1e0f7e499f9af07eed5ba6a3fc5490e72631b6\n\t\n\t\tnote:\n\t\t\tWhen using <version>, the local repo will remain the specified tag or commit.\n\t\t\tDo NOT use <branch> and <version> at the same time\n\n* **ssh_key** (*optional*): the path of the ssh keypair file\n\t\texample:\n\t\t\t/root/.ssh/id_rsa\n\n* **path** (*required* ): the path to clone the repo\n\t\texample:\n\t\t\t/var/www/mysite/\n\n* **user** (*optional*): the user name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file owner will be set to this user. Otherwise, the result depends on whether the file exists. If so, the file owner will be left unchanged. If not, the file will be created under the user name of which the Madeira agent runs.\n\n* **group** (*optional*): the group name of the file owner\n\t\texample:\n\t\t\troot\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this group. Otherwise, the result depends on whether the file exists. If so, the file group will be left unchanged. If not, the file will be created under the group of which the Madeira agent runs.\n\n* **mode** (*optional*): the directory mode\n\t\texample:\n\t\t\t0755\n\t\n\t\tnote:\n\t\t\tIf specified, the file will be set to this mode. Otherwise, the result depends on whether the file exists. If so, the file mode will be left unchanged. If not, the file will be created with the default mode 0755\n\n* **force** (*optional*): force the checkout even if there is conflict, by default ***False***\n\t\t\t\t\t", "cn": ""}, "module": "scm.git", "distro": null}, "group": {"parameter": {"groupname": {"required": true, "type": "line"}, "gid": {"required": false, "type": "line"}, "system": {"default": false, "required": false, "type": "bool"}}, "reference": {"en": "\n### Description\n    manage the group\n    \n### Parameters\n\n*   **groupname** (*required*): the group name\n\n*   **gid** (*optional*): the group id\n\n*   **system** (*optional*): whether this is a system group, by default *False*\n\t\t\t\t\t", "cn": ""}, "module": "sys.user", "distro": null}, "apt repo": {"parameter": {"content": {"required": true, "type": "line"}, "name": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n\tensure the specified APT repository is present and enabled\n\n### Parameters\n\n*   **name** (*required*): the repository name\n\t\tmain\n\n* **content** (*required*): the content of the repository configuration file\n\t\n\t\tdeb http://extras.ubuntu.com/ubuntu precise main\n\t\t\t\t\t", "cn": ""}, "module": "package.apt.repo", "distro": ["debian", "ubuntu"]}, "mount": {"parameter": {"dump": {"default": "0", "required": false, "type": "line"}, "passno": {"default": "0", "required": false, "type": "line"}, "dev": {"required": true, "type": "line", "option": ["ext2", "ext3", "ext4", "btrfs", "iso9660", "ntfs", "reiserfs", "xfs", "zfs"]}, "filesystem": {"required": true, "type": "line"}, "path": {"required": true, "type": "line"}, "opts": {"required": false, "type": "line"}}, "reference": {"en": "\n### Description\n    manage the mount points in /etc/fstab\n    \n### Parameters\n\n*   **path** (*required*): the path of the mount point\n\n*   **dev** (*required*): the device name\n\n*   **filesystem** (*required*): the file system type of the device\n\n*   **dump** (*optional*): the dump value in /etc/fstab, see *fstab(8)*\n\n*   **passno** (*optional*): the pass value in /etc/fstab, see *fstab(8)*\n\n*   **opts** (*optional*): a list of options for /etc/fstab\n            example:\n                noatime\n\t\t\t\t\t", "cn": ""}, "module": "sys.mount", "distro": null}, "hostname": {"parameter": {"hostname": {"required": true, "type": "line"}}, "reference": {"en": "\n### Description\n    manage the host's hostname\n### Parameters\n\n*   **hostname** (*required*): the hostname\n\t\t\t\t\t", "cn": ""}, "module": "sys.hostname", "distro": null}, "apt pkg": {"parameter": {"debconf": {"required": false, "type": "line"}, "verify_gpg": {"default": false, "required": false, "type": "bool"}, "fromrepo": {"required": false, "type": "line"}, "name": {"default": "", "required": true, "type": "dict", "option": ["latest", "removed", "purged"]}}, "reference": {"en": "\n### Description\n ensure APT-based packages installed or removed (with the specified version)\n\n### Parameters\n\n*   **name** (*required*): the package names and versions. You can specify multiple pakages. The following values can be used for package version:\n\t- <***empty***> (*default*): ensure the package is present. If not, will install the latest version available of all APT repos on                   \n\t- <***version***>: ensure the package is present, with the version specified. If the version in unavailable of all APT repos on the host, the state will fail\n\t- **latest**: ensure the package is present with the latest version. If a newer version is available of all APT repos on the host, will do a auto-upgrade\n\t- **removed**: ensure the package is absent\n\t- **purged**: ensure the package is absent, and also delete all related configuration data of the package\n\n\n* **repo** (*optional*): the APT repo name, which you want to use for installing the packages\n\t\tmain\n\n* **debconf** (*optional*):\n\t\t/etc/apt/deb.conf\n\t\n* **verify_gpg** (*optional*): verify the package's GPG siganature, by default ***True***\n\t\t\t\t\t", "cn": ""}, "module": "package.apt.package", "distro": ["debian", "ubuntu"]}, "iptabes": {}, "hosts": {"parameter": {"ip": {"required": true, "type": "line"}, "hostnames": {"required": true, "type": "array"}}, "reference": {"en": "\n### Description\n    manage /etc/hosts\n    \n### Parameters\n\n*   **ip** (*required*): the IP address\n\n*   **hostnames** (*required*): a list of hostnames\n        example:\n            web, web.example.com\n\t\t\t\t\t", "cn": ""}, "module": "sys.hosts", "distro": null}, "zypper.package": {"parameter": {"verify_gpg": {"default": true, "required": false, "type": "bool"}, "fromrepo": {"required": false, "type": "line"}, "name": {"default": "", "required": true, "type": "dict", "value": ["latest", "removed"]}}, "reference": {"en": "\n### Description\n\tinstall and remove rpm package with zypper\n\n### Parameters\n\n*   **name** (*required*): the package names and versions. You can specify multiple pakages. The following values can be used for package version:\n\t- <***empty***> (*default*): ensure the package is present. If not, will install the latest version available of all APT repos on                   \n\t- <***version***>: ensure the package is present, with the version specified. If the version in unavailable of all APT repos on the host, the state will fail\n\t- **latest**: ensure the package is present with the latest version. If a newer version is available of all APT repos on the host, will do a auto-upgrade\n\t- **removed**: ensure the package is absent\n\t- **purged**: ensure the package is absent, and also delete all related configuration data of the package\n \n\n* **fromrepo** (*optional*): an repo name, which you want to use for installing the packages\n\t\tepel\n\t\n* **verify_gpg** (*optional*): verify the package's GPG siganature, by default ***True***\n\t\t\t\t\t", "cn": ""}, "module": "package.zypper.package", "distro": ["opensuse", "suse"]}, "lvm": {}, "yum.package": {"parameter": {"verify_gpg": {"default": true, "required": false, "type": "bool"}, "disablerepo": {"required": false, "type": "line"}, "fromrepo": {"required": false, "type": "line"}, "name": {"default": "", "required": true, "type": "dict", "value": ["latest", "removed"]}, "enablerepo": {"required": false, "type": "line"}}, "reference": {"en": "\n### Description\n\tinstall or remove rpm packages with yum\n\n### Parameters\n\n*   **name** (*required*): the package names and versions. You can specify multiple pakages. The following values can be used for package version:\n\t- <***empty***> (*default*): ensure the package is present. If not, will install the latest version available of all APT repos on                   \n\t- <***version***>: ensure the package is present, with the version specified. If the version in unavailable of all APT repos on the host, the state will fail\n\t- **latest**: ensure the package is present with the latest version. If a newer version is available of all APT repos on the host, will do a auto-upgrade\n\t- **removed**: ensure the package is absent\n\t- **purged**: ensure the package is absent, and also delete all related configuration data of the package\n\n* **fromrepo** (*optional*): an repo name, which you want to use for installing the packages\n\t\tepel\n\n* **enablerepo** (*optional*): a disabled repo name, which you want to enable for installing the packages\n\t\tepel\n\n* **disablerepo** (*optional*): an enabled repo name, which you want to disable for installing the packages\n\t\tepel\n\t\n* **verify_gpg** (*optional*): verify the package's GPG siganature, by default ***True***\n\t\t\t\t\t", "cn": ""}, "module": "package.yum.package", "distro": ["amazon", "redhat", "centos"]}, "quota": {}}, "general": {"reboot": {"parameter": {}, "reference": {"en": "\n### Description\n    perform a host reboot, note: do NOT reboot the host directly with cmd or script, which will be taken as the host crash\n\t\t\t\t\t", "cn": ""}, "module": "general.reboot"}, "wait": {"parameter": {"state": {"required": true, "type": "state"}}, "reference": {"en": "\n### Description\n    wait for remote state(s) to complete, if anyone is not done yet, it will cause the host to block on the waiting.\n    \n### Parameters\n\n*   **state** (*required*): one or multiple remote states to be waited\n        example:\n            single - @hostname.state_id\n            barrier - @host1.state_1, @host2.state_2\n\t\t\t\t\t", "cn": ""}, "module": "general.wait"}}}