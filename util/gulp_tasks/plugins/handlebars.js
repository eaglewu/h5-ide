// Generated by CoffeeScript 1.6.2
var HandlebarsOptions, compile, compileHbs, compilePartials, es, gutil, handlebars, path;

es = require("event-stream");

handlebars = require("handlebars");

path = require("path");

gutil = require("gulp-util");

HandlebarsOptions = {
  knownHelpersOnly: true,
  knownHelpers: {
    i18n: true,
    ifCond: true
  }
};

compile = function(file) {
  if (path.extname(file.path) === ".partials") {
    compilePartials(file);
  } else {
    compileHbs(file);
  }
  this.emit("data", file);
  return null;
};

compilePartials = function(file) {
  var content, data, i, idx, n, namespace, namespaces, newData, space, _i, _len;

  content = file.contents.toString("utf8");
  data = content.split(/\<!-- (.*) --\>/ig);
  newData = "";
  namespace = {};
  i = 1;
  while (i < data.length) {
    newData += ("TEMPLATE." + data[i] + "=") + handlebars.precompile(data[i + 1], HandlebarsOptions) + ";\n\n";
    namespaces = data[i].split(".");
    space = namespace;
    for (idx = _i = 0, _len = namespaces.length; _i < _len; idx = ++_i) {
      n = namespaces[idx];
      if (idx < namespaces.length - 1) {
        if (!space[n]) {
          space[n] = {};
        }
        space = space[n];
      }
    }
    i += 2;
  }
  newData = "define(['handlebars'], function(Handlebars){ var TEMPLATE=" + JSON.stringify(namespace) + ";\n\n" + newData + "return TEMPLATE; });";
  file.contents = new Buffer(newData, "utf8");
  file.path = gutil.replaceExtension(file.path, ".js");
  return null;
};

compileHbs = function(file) {
  var newData;

  newData = handlebars.precompile(file.contents.toString("utf8"), HandlebarsOptions);
  newData = "define(['handlebars'], function(Handlebars){ var TEMPLATE = " + newData + "; return TEMPLATE; });";
  file.contents = new Buffer(newData, "utf8");
  file.path = gutil.replaceExtension(file.path, ".js");
  return null;
};

module.exports = function() {
  return es.through(compile);
};
