{
  "id": "regex id, stack-\\w{8} , example: 'stack-d901ce2b'",
  "version": "'2013-09-04',required",
  "region": "regex Region,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}$, required, example:'us-east-1'",
  "platform": "['ec2-classic'|'ec2-vpc'|'default-vpc'|'custom-vpc'], required",
  "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'stack1'",
  "description": "not required",
  "state": "[*'Enabled','Removed'], required",
  "username": "base64 encode, example:'eGppbW15'",
  "owner": "",
  "key": "for thumbnail, 0KmcthfkEKGIHKgEov3Wbe4es3cqpF6Hw0hiCNbm0iXQYy8WGb6wNuF+mvqqPO5TdGFjayBrZXk=",
  "usage": "app usage, ['production', 'development', 'testing', 'others']",
  "tag": "reserved",
  "history": {
    "time": {
      "updated": 1386648015,
      "created": 1386647772
    }
  },
  "property": {
    "policy": {
      "ha": ""
    },
    "stoppable": true,
    "schedule": {
      "stop": {
        "run": null,
        "when": null,
        "during": null
      },
      "backup": {
        "when": null,
        "day": null
      },
      "start": {
        "when": null
      }
    },
    "lease": {
      "action": "",
      "length": null,
      "due": null
    }
  },
  "component": {
    "$INSTANCE": {
      "type": "Valid value, 'AWS.EC2.Instance', required,    # (format, value, not_empty)",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required,",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required",
      "state": "?Not necessary",
      "index": "index of server group, required, number(>=0)",
      "number": "instance number in server group, required, number(>=1)",
      "serverGroupUid": "server group uid, required, UID",
      "serverGroupName": "server group name, required, regex, ^\\w+[A-Za-z0-9-]*$, eg:host1",
      "resource": {
        "InstanceId": "filled by RW, InstanceId regex , 'i-\\w{8}', not required",
        "VpcId": "reference,@xxxx.resource.xxxx, or  regex vpc,vpc-\\w{8}, not required",
        "SubnetId": "reference,@xxxx.resource.xxxx,or  regex subnet,subnet-\\w{8}, not required",
        "ImageId": "AMI Id regex ,'ami-\\w{8}', required",
        "KeyName": "reference,@xxxx.resource.xxxx, required, exmaple:@$DEFAULT_KP.resource.KeyName",
        "InstanceType": "Instance Type,  example:[t1.micro, m1.small...], required",
        "Monitoring": "Valid value,[*'disabled','enabled'], required",
        "Placement": {
          "GroupName": "Not necessary",
          "Tenancy": "Valid value, ['dedicated', 'default'], not required",
          "AvailabilityZone": "regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:us-east-1a"
        },
        "EbsOptimized": "Valid value, [true, *false], not required",
        "DisableApiTermination": "Not necessary, [true,*false]",
        "ShutdownBehavior": "Not necessary, [*terminate,stop], see instanceInitiatedShutdownBehavior",
        "NetworkInterface: Not necessary": [],
        "PrivateIpAddress": "Not necessary",
        "BlockDeviceMapping: Not necessary": [
          "#$VOLUME"
        ],
        "UserData: Not necessary": {
          "Base64Encoded": "[true,*false]",
          "Data": ""
        },
        "SecurityGroupId: reference,@xxxx.resource.xxxx, required": [],
        "SecurityGroup: Not necessary": [],
        "KernelId": "Not necessary",
        "RamdiskId": "Not necessary"
      },
      "software: Not necessary": {}
    },
    "$VOLUME": {
      "type": "Valid value,'AWS.EC2.EBS.Volume', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:/dev/sdf",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $VOLUME",
      "index": 0,
      "number": 1,
      "serverGroupUid": "regex UID, example:$VOLUME",
      "serverGroupName": "server group name, required, regex, ^\\w+[A-Za-z0-9-]*$, eg:/dev/sdf",
      "resource": {
        "VolumeId": "filled by RW, regex volume id,'vol-\\w{8}', not required,",
        "Size": "INT, [1, 1024], required, example:1",
        "AvailabilityZone": "regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:us-east-1a",
        "VolumeType": "Valid value,[*'standard', 'io1'], required",
        "Iops": "INT, [100, 2000], required for 'io1'",
        "SnapshotId": "regex snapshot id,'snap-\\w{8}', not required",
        "CreateTime": "Not necessary",
        "Status": "Not necessary",
        "AttachmentSet": {
          "VolumeId": "regex volume id,'vol-\\w{8}', not required, example:@$VOLUME.resource.VolumeId",
          "Device": "required, example:'/dev/sdf'",
          "InstanceId": "reference,@xxxx.resource.xxxx, required, example:@$INSTANCE.resource.InstanceId",
          "DeleteOnTermination": "Not necessary,[*true,false]",
          "AttachTime": "Not necessary",
          "Status": "Not necessary"
        }
      }
    },
    "$DEFAULT-SG": {
      "type": "Valid value,'AWS.EC2.SecurityGroup', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'DefaultSG'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $DEFAULT-SG",
      "resource": {
        "GroupName": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'DefaultSG'",
        "GroupId": "filled by RW, regex SG ID,'sg-\\w{8}', not required",
        "IpPermissionsEgress": [],
        "IpPermissions": [
          {
            "IpRanges": "reference or  sg id or account number or ip range, required, example:0.0.0.0/0",
            "IpProtocol": "Valid value,['tcp', 'udp', 'icmp', 6, 17, 1, -1, '6', '17', '1', '-1'], or  Int,>= -1, <= 65535, not required, example:tcp",
            "ToPort": "Int,>= -1, <= 65535, not required, example:22",
            "FromPort": "Int,>=-1, <=65535, not required, example:22"
          },
          {
            "IpRanges": "reference or  sg id or account number or ip range, required, example:@2E8C6BC4-0F27-4E2D-AB7B-6084EC674D98.resource.GroupId",
            "ToPort": "Int,>=-1, <=65535, not required, example:8080",
            "IpProtocol": "Valid value,['tcp', 'udp', 'icmp', 6, 17, 1, -1, '6', '17', '1', '-1'], or  Int,>= -1, <= 65535, not required, example:tcp",
            "FromPort": "Int,>=-1, <=65535, not required, example:8080"
          }
        ],
        "VpcId": "reference,@xxxx.resource.xxxx,or  regex vpc,vpc-\\w{8}, not required, example:@$VPC.resource.VpcId",
        "GroupDescription": "Not necessary",
        "OwnerId": "Not necessary"
      }
    },
    "$DEFAULT-KP": {
      "type": "Valid value,'AWS.EC2.KeyPair', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:DefaultKP",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $DEFAULT-KP",
      "resource": {
        "KeyName": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:DefaultKP",
        "KeyFingerprint": "Not necessary, filled by RW, example:'44:2c:71:09:92:15:9e:15:7c:38:ce:fc:34:f4:ac:8a:60:91:a9:2b'"
      }
    },
    "$ENI0": {
      "type": "Valid value,'AWS.VPC.NetworkInterface', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:eni0",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $ENI0",
      "index": 0,
      "number": 1,
      "serverGroupUid": "",
      "serverGroupName": "",
      "resource": {
        "NetworkInterfaceId": "regex  eni id,'eni-\\w{8}', not required",
        "SubnetId": "reference,@xxxx.resource.xxxx, or  regex subnet,subnet-\\w{8}, not required, example:@$SUBNET1.resource.SubnetId",
        "VpcId": "reference,@xxxx.resource.xxxx, or  regex vpc,vpc-\\w{8}, not required, example:@$VPC.resource.VpcId",
        "AvailabilityZone": "regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:us-east-1a",
        "SourceDestCheck": "Valid value, [*true, false], required",
        "SecondPriIpCount": "INT, [0, 16], not required",
        "PrivateIpAddress": "regex IP,'\\d+\\.\\d+\\.\\d+\\.\\d+', not required",
        "AssociatePublicIpAddress": "?Valid value, [true, *false], not required",
        "GroupSet": [
          {
            "GroupName": "reference,@xxxx.resource.xxxx, not required, example:@$DEFAULT-SG.resource.GroupName",
            "GroupId": "reference,@xxxx.resource.xxxx, required, example:@$DEFAULT-SG.resource.GroupId"
          },
          {
            "GroupName": "reference,@xxxx.resource.xxxx, not required, example:@$HOST-SG.resource.GroupName",
            "GroupId": "reference,@xxxx.resource.xxxx, required, example:@$HOST-SG.resource.GroupId"
          }
        ],
        "PrivateIpAddressSet": [
          {
            "Primary": "Valid value, [*true, false], required",
            "AutoAssign": "Valid value, [*true, false], not required",
            "Association": {
              "InstanceId": "Not necessary",
              "AssociationID": "Not necessary",
              "PublicDnsName": "Not necessary",
              "IpOwnerId": "Not necessary",
              "PublicIp": "Not necessary",
              "AllocationID": "Not necessary"
            },
            "PrivateIpAddress": "regex IP,'\\d+\\.\\d+\\.\\d+\\.\\d+', not required, example:10.0.0.4"
          }
        ],
        "Attachment": {
          "DeviceIndex": "INT, [0, 32], required, example:0",
          "InstanceId": "reference,@xxxx.resource.xxxx, required, example:@$INSTANCE.resource.InstanceId",
          "AttachmentId": "Not necessary",
          "AttachTime": "Not necessary"
        },
        "PrivateDnsName": "Not necessary",
        "Description": "Not necessary",
        "MacAddress": "Not necessary",
        "RequestManaged": "Not necessary",
        "RequestId": "Not necessary",
        "OwnerId": "Not necessary",
        "Status": "Not necessary"
      }
    },
    "$ELB": {
      "type": "Valid value, 'AWS.ELB', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:load-balancer-1",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $ELB",
      "resource": {
        "AvailabilityZones": [
          "regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:us-east-1a",
          "regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:us-east-1b"
        ],
        "CrossZoneLoadBalancing": "?Valid value, [true, *false], required",
        "Subnets": [
          "reference,@xxxx.resource.xxxx, not required,regex subnet,subnet-\\w{8}, not required, example:@$SUBNET1.resource.SubnetId",
          "reference,@xxxx.resource.xxxx, not required,regex subnet,subnet-\\w{8}, not required, example:@$SUBNET2.resource.SubnetId"
        ],
        "CanonicalHostedZoneNameID": "Not necessary",
        "CanonicalHostedZoneName": "Not necessary",
        "ListenerDescriptions": [
          {
            "Listener": {
              "InstancePort": "INT, [0, 65535], required, example:80",
              "Protocol": "Valid value,['TCP','HTTP','HTTPS','SSL'], required, example:HTTP",
              "InstanceProtocol": "Valid value,['TCP','HTTP','HTTPS','SSL'], not required, example:HTTP",
              "LoadBalancerPort": "INT, [0, 65535], required, example:80",
              "Canremove": "Valid value, [true, *false], required",
              "SSLCertificateId": "reference, not required"
            },
            "PolicyNames": "Not necessary"
          }
        ],
        "Instances": [
          {
            "InstanceId": "reference,@xxxx.resource.xxxx, required, example:@$INSTANCE.resource.InstanceId"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "INT, [2, 10], required, example:9",
          "Interval": "INT, [30, 300], required, example:30",
          "Target": "Not necessary, example:HTTP:80/index.html",
          "Timeout": "INT, [2, 60], required, example:5",
          "UnhealthyThreshold": "INT, [2, 10], required, example:4"
        },
        "BackendServerDescriptions": [
          {
            "InstantPort": "INT, [0, 65535], not required",
            "PoliciyNames": "Not necessary"
          }
        ],
        "DNSName": "Not necessary",
        "VpcId": "reference,@xxxx.resource.xxxx, not required,regex vpc,vpc-\\w{8}, not required, example:@$VPC.resource.VpcId",
        "Policies": {
          "LBCookieStickinessPolicies": [
            {
              "PolicyName": "Not necessary",
              "CookieExpirationPeriod": "Not necessary"
            }
          ],
          "AppCookieStickinessPolicies": [
            {
              "PolicyName": "Not necessary",
              "CookieName": "Not necessary"
            }
          ],
          "OtherPolicies": [
            {
              "PolicyName": "Not necessary",
              "PolicyTypeName": "Not necessary",
              "PolicyAttributes": {
                "AttributeName": "Not necessary",
                "AttributeValue": "Not necessary"
              },
              "LoadBalancerName": "?Not necessary"
            }
          ]
        },
        "LoadBalancerName": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:load-balancer-1",
        "CreatedTime": "Not necessary",
        "SecurityGroups": [
          "reference,@xxxx.resource.xxxx, not required, example:@$ELB-SG.resource.GroupId"
        ],
        "Scheme": "Valid value,['internal','internet-facing'], not required",
        "SourceSecurityGroup": {
          "OwnerAlias": "Not necessary",
          "GroupName": "Not necessary"
        }
      }
    },
    "$VPC": {
      "type": "Valid value,'AWS.VPC.VPC', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'vpc'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $VPC",
      "resource": {
        "VpcId": "fill by RW, regex vpc,vpc-\\w{8}, not required",
        "EnableDnsSupport": "Valid value, [*true, false], not required",
        "InstanceTenancy": "Valid value ,[*'default','dedicated'], required",
        "EnableDnsHostnames": "Valid value, [true, *false], not required",
        "DhcpOptionsId": "reference,@xxxx.resource.xxxx,or  Valid value,'default', not required, example:@$DHCP.resource.DhcpOptionsId",
        "CidrBlock": "regex IP range, '\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:10.0.0.0/16",
        "IsDefault": "Not necessary [true,*false]",
        "State": "Not necessary"
      }
    },
    "$DHCP": {
      "type": "Valid value,'AWS.VPC.DhcpOptions', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:default",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $DHCP",
      "resource": {
        "VpcId": "reference,@xxxx.resource.xxxx, required, example:@$VPC.resource.VpcId",
        "DhcpOptionsId": "filled by RW, regex DHCP,'dopt-\\w{8}', not required",
        "DhcpConfigurationSet": [
          {
            "ValueSet": [
              {
                "Value": "madeiracloud.com"
              }
            ],
            "Key": "['domain-name-servers','domain-name','ntp-servers','netbios-name-servers'], required, example:'domain-name'"
          },
          {
            "ValueSet": [
              {
                "Value": "AmazonProvidedDNS"
              }
            ],
            "Key": "['domain-name-servers','domain-name','ntp-servers','netbios-name-servers'], required, example:'domain-name-servers'"
          },
          {
            "ValueSet": [
              {
                "Value": "211.98.26.2"
              }
            ],
            "Key": "['domain-name-servers','domain-name','ntp-servers','netbios-name-servers'], required, example:'ntp-servers'"
          },
          {
            "ValueSet": [
              {
                "Value": "211.98.26.3"
              }
            ],
            "Key": "['domain-name-servers','domain-name','ntp-servers','netbios-name-servers'], required, example:'netbios-name-servers'"
          }
        ]
      }
    },
    "$SUBNET1": {
      "type": "Valid value,'AWS.VPC.Subnet', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:subnet1",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, example:$SUBNET1",
      "resource": {
        "SubnetId": "filled by RW,regex subnet,subnet-\\w{8}, not required",
        "VpcId": "reference,@xxxx.resource.xxxx, required, example:@$VPC.resource.VpcId",
        "AvailabilityZone": "regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:'us-east-1a'",
        "CidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'10.0.0.0/24'",
        "AvailableIpAddressCount": "Not necessary",
        "State": "Not necessary"
      }
    },
    "$ROUTETABLE": {
      "type": "Valid value,'AWS.VPC.RouteTable', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'RT-1'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $ROUTETABLE",
      "resource": {
        "RouteTableId": "filled by RW, regex RT id,'rtb-\\w{8}', not required",
        "VpcId": "reference,@xxxx.resource.xxxx, required, example:@$VPC.resource.VpcId",
        "PropagatingVgwSet": [
          "@$VGW.resource.VpnGatewayId"
        ],
        "RouteSet": [
          {
            "Origin": "?Not necessary, example:'CreateRouteTable'",
            "DestinationCidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'10.0.0.0/16'",
            "InstanceId": "reference,@xxxx.resource.xxxx, not required",
            "NetworkInterfaceId": "reference,@xxxx.resource.xxxx, not required",
            "State": "?Not necessary, example:'active'",
            "GatewayId": "reference,@xxxx.resource.xxxx,or  Valid value,'local', not required, example:'local'",
            "InstanceOwnerId": "Not necessary"
          },
          {
            "Origin": "Not necessary",
            "DestinationCidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'192.168.1.1/24'",
            "InstanceId": "reference,@xxxx.resource.xxxx, not required, example:@$INSTANCE.resource.InstanceId",
            "NetworkInterfaceId": "reference,@xxxx.resource.xxxx, not required",
            "State": "Not necessary",
            "GatewayId": "reference,@xxxx.resource.xxxx,or  Valid value,'local', not required, example:''",
            "InstanceOwnerId": "Not necessary"
          },
          {
            "Origin": "Not necessary",
            "DestinationCidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'0.0.0.0/0'",
            "InstanceId": "reference,@xxxx.resource.xxxx, not required, example:''",
            "NetworkInterfaceId": "reference,@xxxx.resource.xxxx, not required",
            "State": "Not necessary",
            "GatewayId": "reference,@xxxx.resource.xxxx,or  Valid value,'local', not required, example:@$IGW.resource.InternetGatewayId",
            "InstanceOwnerId": "Not necessary"
          },
          {
            "Origin": "Not necessary",
            "DestinationCidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'192.168.10.2/24'",
            "InstanceId": "reference,@xxxx.resource.xxxx, not required, example:''",
            "NetworkInterfaceId": "reference,@xxxx.resource.xxxx, not required",
            "State": "Not necessary",
            "GatewayId": "reference,@xxxx.resource.xxxx,or  Valid value,'local', not required, example:@$VGW.resource.VpnGatewayId",
            "InstanceOwnerId": "Not necessary"
          },
          {
            "Origin": "Not necessary",
            "DestinationCidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'192.168.20.0/24'",
            "InstanceId": "reference,@xxxx.resource.xxxx, not required",
            "NetworkInterfaceId": "reference,@xxxx.resource.xxxx, not required, example:@$ENI1.resource.NetworkInterfaceId",
            "State": "Not necessary",
            "GatewayId": "reference,@xxxx.resource.xxxx,or  Valid value,'local', not required",
            "InstanceOwnerId": "Not necessary"
          }
        ],
        "AssociationSet": [
          {
            "Main": "Valid value, [true, false], not required, example:true",
            "SubnetId": "reference,@xxxx.resource.xxxx, not required",
            "RouteTableId": "Not necessary",
            "RouteTableAssociationId": "Not necessary"
          }
        ]
      }
    },
    "$ACL": {
      "type": "Valid value,'AWS.VPC.NetworkAcl', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'DefaultACL'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $ACL",
      "resource": {
        "NetworkAclId": "filled by RW, regex ACL,'acl-\\w{8}', not required",
        "VpcId": "reference,@xxxx.resource.xxxx, required, example:@$VPC.resource.VpcId",
        "Default": "Valid value, [true, false], required",
        "RouteTableId": "?",
        "EntrySet": [
          {
            "IcmpTypeCode": {
              "Code": "INT, [-1, 40], not required",
              "Type": "INT, [-1, 255], not required"
            },
            "RuleNumber": "INT, [1, 32767], required, example:100",
            "Protocol": "INT, [-1, 255], required, example:-1",
            "Egress": "Valid value, [true, false], required, example:true",
            "RuleAction": "Valid value, ['allow','deny'], required, example:'allow'",
            "CidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', or  reference,@xxxx.resource.xxxx, required, example:'0.0.0.0/0'",
            "PortRange": {
              "To": "INT, [0, 65535], not required",
              "From": "INT, [0, 65535], not required"
            }
          },
          {
            "IcmpTypeCode": {
              "Code": "INT, [-1, 40], not required",
              "Type": "INT, [-1, 255], not required"
            },
            "RuleNumber": "INT, [1, 32767], required, example:32767",
            "Protocol": "INT, [-1, 255], required, example:-1",
            "PortRange": {
              "To": "",
              "From": ""
            },
            "Egress": "Valid value, [true, false], required, example:true",
            "RuleAction": "Valid value, ['allow','deny'], required, example:'deny'",
            "CidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', or  reference,@xxxx.resource.xxxx, required, example:'0.0.0.0/0'"
          }
        ],
        "AssociationSet": [
          {
            "SubnetId": "reference,@xxxx.resource.xxxx, required, example:@$SUBNET1.resource.SubnetId",
            "NetworkAclId": "regex ACL,'acl-\\w{8}', not required",
            "NetworkAclAssociationId": "Not necessary"
          },
          {
            "SubnetId": "reference,@xxxx.resource.xxxx, required, example:@$SUBNET2.resource.SubnetId",
            "NetworkAclId": "regex ACL,'acl-\\w{8}', not required",
            "NetworkAclAssociationId": "Not necessary"
          }
        ]
      }
    },
    "$IGW": {
      "type": "Valid value,'AWS.VPC.InternetGateway', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'Internet-gateway'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $IGW",
      "resource": {
        "AttachmentSet": [
          {
            "State": "Not necessary, example:'available'",
            "VpcId": "reference,@xxxx.resource.xxxx, required, example:@$VPC.resource.VpcId"
          }
        ],
        "InternetGatewayId": "filled by RW, regex igw,'igw-\\w{8}', not required"
      }
    },
    "$VGW": {
      "type": "Valid value,'AWS.VPC.VPNGateway', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'VPN-gateway'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $VGW",
      "resource": {
        "VpnGatewayId": "filled by RW,regex VGW id,'vgw-\\w{8}', not required",
        "State": "Not necessary, example:'available'",
        "AvailabilityZone": "?regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required, example:''",
        "Type": "Valid value,'ipsec.1', not required, example:'ipsec.1'",
        "Attachments": [
          {
            "VpcId": "reference,@xxxx.resource.xxxx, required, example:@$VPC.resource.VpcId",
            "State": "Not necessary, example:'attached'"
          }
        ]
      }
    },
    "$VPN1": {
      "type": "Valid value, 'AWS.VPC.VPNConnection', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'VPN'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $VPN1",
      "resource": {
        "VpnConnectionId": "filled by RW, regex VPN ID, 'vpn-\\w{8}', not required",
        "CustomerGatewayConfiguration": "Not necessary",
        "Routes": [
          {
            "Source": "Not necessary",
            "State": "Not necessary",
            "DestinationCidrBlock": "regex IP range,'\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+', required, example:'192.168.1.0/24'"
          }
        ],
        "VgwTelemetry": {
          "Status": "Not necessary",
          "LastStatusChange": "Not necessary",
          "AcceptRouteCount": "Not necessary",
          "OutsideIpAddress": "Not necessary",
          "StatusMessage": "Not necessary"
        },
        "State": "Not necessary",
        "VpnGatewayId": "reference,@xxxx.resource.xxxx, required, example:@$VGW.resource.VpnGatewayId",
        "CustomerGatewayId": "reference,@xxxx.resource.xxxx, required, example:@$CGW11.resource.CustomerGatewayId",
        "Type": "Valid value, 'ipsec.1', not required, example:'ipsec.1'",
        "Options": {
          "StaticRoutesOnly": "Valid value, [*true, false], required"
        }
      }
    },
    "$CGW1": {
      "type": "Valid value,'AWS.VPC.CustomerGateway', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'customer-gateway-1'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $CGW1",
      "resource": {
        "CustomerGatewayId": "filled by RW, regex CGW,'cgw-\\w{8}', not required",
        "IpAddress": "regex IP,'\\d+\\.\\d+\\.\\d+\\.\\d+', required, example:'211.98.26.10'",
        "Type": "Valid value,'ipsec.1', not required, example:'ipsec.1'",
        "BgpAsn": "INT, [1, 4294967295], not required",
        "State": "Not necessary, exmaple:'available'"
      }
    },
    "$ASG": {
      "type": "Valid value,'AWS.AutoScaling.Group', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'asg1'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $ASG",
      "resource": {
        "AutoScalingGroupARN": "filled by RW,regex ARN, ^arn:aws:\\w+:[a-zA-Z0-9-]*:[0-9]*:, not required",
        "AutoScalingGroupName": "?regex name,^\\w+[A-Za-z0-9-]*$, required, example:'asg1'",
        "VPCZoneIdentifier": "Not necessary, example:'@$SUBNET1.resource.SubnetId , @$SUBNET2.resource.SubnetId'",
        "LaunchConfigurationName": "reference, required, example:@$LAUNCH-CONFIGURATION.resource.LaunchConfigurationName",
        "AvailabilityZones": [
          "?Not necessary, example:'us-east-1a'",
          "?Not necessary, example:'us-east-1b'"
        ],
        "LoadBalancerNames": [
          "reference,　not required, example:@$ELB.resource.LoadBalancerName"
        ],
        "Instances ?": [],
        "InstanceId": "?",
        "MinSize": "INT, [0, 65534], required, example:1",
        "MaxSize": "INT, [0, 65534], required, example:2",
        "TerminationPolicies": [
          "['OldestInstance', 'NewestInstance', 'OldestLaunchConfiguration', 'ClosestToNextInstanceHour', 'Default'], not required, example:'Default'"
        ],
        "HealthCheckGracePeriod": "INT, [0, 86400], not required, example:300",
        "HealthCheckType": "Valid value,['EC2','ELB'], not required, example:'EC2'",
        "DesiredCapacity": "INT, [0, 65534], not required, example:1",
        "DefaultCooldown": "INT, [0, 86400], not required, example:300",
        "SuspendedProcesses": [
          {
            "ProcessName": "Not necessary",
            "SuspensionReason": "Not necessary"
          }
        ],
        "EnabledMetrics": [
          {
            "Metric": "Not necessary",
            "Granularity": "Not necessary"
          }
        ],
        "Status": "Not necessary",
        "PlacementGroup": "Not necessary",
        "CreatedTime": "Not necessary",
        "ShouldDecrementDesiredCapacity": "",
        "Tags": "?"
      }
    },
    "$LAUNCH-CONFIGURATION": {
      "type": "Valid value,'AWS.AutoScaling.LaunchConfiguration', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'launch-config-1'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $LAUNCH-CONFIGURATION",
      "resource": {
        "LaunchConfigurationARN": "fixed by RW, regex LC, ^arn:aws:\\w+:[a-zA-Z0-9-]*:[0-9]*:, not required",
        "LaunchConfigurationName": "regex name,^\\w+[A-Za-z0-9-]*$, required, example：‘launch-config-1’",
        "ImageId": "regex AMI, ^ami-\\w{8}$, required, example:'ami-cde4bca4'",
        "InstanceType": "required, example:'m1.small'",
        "SecurityGroups": [
          "reference, required, example:@$DEFAULT-SG.resource.GroupId"
        ],
        "KeyName": "reference, not required, @$DEFAULT-KP.resource.KeyName",
        "EbsOptimized": "Valid value, ['true', 'false'], not required",
        "InstanceMonitoring": "Valid value, ['true', 'false'], not required",
        "BlockDeviceMapping": [
          {
            "DeviceName": "required, example:'/dev/sdf'",
            "Ebs": {
              "VolumeSize": "?required, example:1"
            }
          }
        ],
        "CreatedTime": "Not necessary",
        "KernelId": "Not necessary",
        "RamdiskId": "Not necessary",
        "IamInstanceProfile": "Not necessary",
        "UserData": "Not necessary",
        "SpotPrice": "Not necessary"
      }
    },
    "$CLOUD-WATCH": {
      "type": "Valid value, 'AWS.CloudWatch.CloudWatch', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'asg1-policy-1-alarm'",
      "uid": "?regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $CLOUD-WATCH",
      "resource": {
        "AlarmArn": "Not necessary",
        "AlarmName": "regex name, required, example:'asg1-policy-1-alarm'",
        "EvaluationPeriods": "INT, [1, 86400], not required, example:2",
        "Namespace": "Valid value, ['AWS/AutoScaling', 'AWS/EC2', 'AWS/ELB'], required, example:'AWS/AutoScaling'",
        "MetricName": "?regex name, required, 'CPUUtilization'",
        "Threshold": "?corresponding value, example:int, required, example:1",
        "Statistic": "Valid value,['Average', 'SampleCount', 'Sum', 'Minimum', 'Maximum'], required, example:'Average'",
        "Dimensions": [
          {
            "name": "Valid value,['AutoScalingGroupName'], required, example:'AutoScalingGroupName'",
            "value": "reference, required, example:@$ASG.resource.AutoScalingGroupName"
          }
        ],
        "Period": "INT, [1, 86400], not required, example:300",
        "ComparisonOperator": "Valid value,['<=','<','>','>='], not required, example:'>='",
        "OKAction : ?reference, not required": [],
        "InsufficientDataActions: ?reference, not required": [],
        "Unit": "Not necessary",
        "StateValue": "Not necessary",
        "StateUpdateTimestamp": "Not necessary",
        "ActionEnabled": "Not necessary",
        "StateReason": "Not necessary",
        "StateReasonData": "Not necessary",
        "AlarmDescription": "Not necessary",
        "AlarmConfigurationUpdatedTimestamp": "Not necessary",
        "AlarmActions": [
          "Not necessary, example:@$SCALING-POLICY.resource.PolicyARN"
        ]
      }
    },
    "$SCALING-POLICY": {
      "type": "Valid value,'AWS.AutoScaling.ScalingPolicy', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'asg1-policy-1'",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $SCALING-POLICY",
      "resource": {
        "PolicyARN": "filled by RW, regex ARN, not required",
        "PolicyName": "regex name,^\\w+[A-Za-z0-9-]*$, required, example:'asg1-policy-1'",
        "AutoScalingGroupName": "reference, required, example:@$ASG.resource.AutoScalingGroupName",
        "ScalingAdjustment": "INT, [-65534, 65534], required, example:1",
        "AdjustmentType": "Valid value,['ChangeInCapacity', 'ExactCapacity', 'PercentChangeInCapacity'], required, example:'ChangeInCapacity'",
        "MinAdjustmentStep": "INT, [-65534, 65534], not required",
        "Cooldown": "INT, [0, 86400], not required",
        "Alarms ?": [
          {
            "AlarmName": "",
            "AlarmARN": ""
          }
        ]
      }
    },
    "$NOTIFICATION-CONFIGURATION": {
      "type": "Valid value,'AWS.AutoScaling.NotificationConfiguration', required",
      "name": "?regex name,^\\w+[A-Za-z0-9-]*$, not required",
      "uid": "regex UID,^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$, required, same to $NOTIFICATION-CONFIGURATION",
      "resource": {
        "TopicARN": "reference, required, example:@$TOPIC.resource.TopicArn",
        "AutoScalingGroupName": "reference, required, @$ASG.resource.AutoScalingGroupName",
        "NotificationType": [
          "Valid value, ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR', 'autoscaling:TEST_NOTIFICATION'], required, example:'autoscaling:EC2_INSTANCE_LAUNCH'",
          "Valid value, ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR', 'autoscaling:TEST_NOTIFICATION'], required, example:'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'"
        ]
      }
    },
    "$TOPIC": {
      "type": "Valid value,'AWS.SNS.Topic', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required, example:'sns-topic'",
      "uid": "regex uid, same to $TOPIC",
      "resource": {
        "TopicArn": "?Not necessary",
        "Name": "regex name, required, sns-topic",
        "DisplayName": "regex name, required, example:'sns-topic'",
        "Policy": "Not necessary",
        "DeliveryPolicy": "Not necessary"
      }
    },
    "$SUBSCRIPTION1": {
      "type": "Valid value,'AWS.SNS.Subscription', required",
      "name": "regex name,^\\w+[A-Za-z0-9-]*$, not required",
      "uid": "regex uid, required, same to $SUBSCRIPTION1",
      "resource": {
        "TopicArn": "referenceTopicArn, required, example:@$TOPIC.resource.TopicArn",
        "Protocol": "['https','http','sms','email','email-json'], required, example:'email'",
        "Endpoint": "required, example:'xjimmyshcn@gmail.com'",
        "DeliveryPolicy": "Not necessary",
        "SubscriptionArn": "Not necessary"
      }
    }
  },
  "layout": {
    "component": {
      "node": {
        "$INSTANCE": {
          "coordinate": [
            27,
            22
          ],
          "virtualizationType": "paravirtual",
          "osFamily": "linux",
          "uid": "$INSTANCE",
          "instanceList": [
            "$INSTANCE"
          ],
          "groupUId": "$SUBNET1",
          "volumeList": {
            "$VOLUME": [
              "$VOLUME"
            ]
          },
          "eipList": {},
          "connection": [
            {
              "target": "$ROUTETABLE",
              "port": "instance-rtb",
              "line": "0EE2F884-BC0D-4793-9919-CB3C9732F25B"
            },
            {
              "target": "$ELB",
              "port": "instance-sg",
              "line": "80447053-9AC3-4CBF-8B5B-60D254CB86F7"
            },
            {
              "target": "$ENI1",
              "port": "instance-attach",
              "line": "0E2BEED8-072E-4EFB-B2DA-986C8806BA08"
            },
            {
              "target": "$LAUNCH-CONFIGURATION",
              "port": "instance-sg",
              "line": "29CCCE1E-36C0-43F1-A607-44CC495AD2EE"
            },
            {
              "target": "3E2E3F46-49C8-4541-A5F4-04D5219213A8",
              "port": "instance-sg",
              "line": "DA783FB7-5E14-4C8E-9554-5A6A7C2E4EA1"
            }
          ],
          "architecture": "i386",
          "rootDeviceType": "ebs",
          "eniList": [
            "$ENI0"
          ],
          "type": "AWS.EC2.Instance",
          "osType": "amazon"
        },
        "$ENI1": {
          "uid": "$ENI1",
          "groupUId": "$SUBNET1",
          "eipList": {},
          "connection": [
            {
              "target": "$ROUTETABLE",
              "port": "eni-rtb",
              "line": "94DD35D3-0EA5-4932-BC21-C4CE4E8291C9"
            },
            {
              "target": "$INSTANCE",
              "port": "eni-attach",
              "line": "0E2BEED8-072E-4EFB-B2DA-986C8806BA08"
            }
          ],
          "coordinate": [
            45,
            22
          ],
          "eniList": [
            "$ENI1"
          ],
          "type": "AWS.VPC.NetworkInterface"
        },
        "$IGW": {
          "coordinate": [
            1,
            12
          ],
          "connection": [
            {
              "target": "$ROUTETABLE",
              "port": "igw-tgt",
              "line": "98A434AC-2190-4E12-BECA-A77DB9DE7169"
            }
          ],
          "type": "AWS.VPC.InternetGateway",
          "uid": "$IGW",
          "groupUId": "$VPC"
        },
        "$VGW": {
          "coordinate": [
            60,
            9
          ],
          "connection": [
            {
              "target": "$ROUTETABLE",
              "port": "vgw-tgt",
              "line": "B50348D9-797E-46FF-99CE-6C0460480492"
            },
            {
              "target": "$CGW1",
              "port": "vgw-vpn",
              "line": "3BB564AC-0CE4-4271-B843-95C0ACBEF4CB"
            },
            {
              "target": "$CGW2",
              "port": "vgw-vpn",
              "line": "40B99F23-CBDE-48E1-B71E-59DE2F7437A0"
            }
          ],
          "type": "AWS.VPC.VPNGateway",
          "uid": "$VGW",
          "groupUId": "$VPC"
        },
        "$CGW1": {
          "uid": "$CGW1",
          "type": "AWS.VPC.CustomerGateway",
          "groupUId": "",
          "connection": [
            {
              "target": "$VGW",
              "port": "cgw-vpn",
              "line": "3BB564AC-0CE4-4271-B843-95C0ACBEF4CB"
            }
          ],
          "coordinate": [
            71,
            7
          ],
          "networkName": "customer-gateway-1"
        },
        "$CGW2": {
          "uid": "$CGW2",
          "type": "AWS.VPC.CustomerGateway",
          "groupUId": "",
          "connection": [
            {
              "target": "$VGW",
              "port": "cgw-vpn",
              "line": "40B99F23-CBDE-48E1-B71E-59DE2F7437A0"
            }
          ],
          "coordinate": [
            71,
            22
          ],
          "networkName": "customer-gateway-2"
        },
        "$ROUTETABLE": {
          "coordinate": [
            36,
            5
          ],
          "connection": [
            {
              "target": "$INSTANCE",
              "port": "rtb-tgt",
              "line": "0EE2F884-BC0D-4793-9919-CB3C9732F25B"
            },
            {
              "target": "$IGW",
              "port": "rtb-tgt",
              "line": "98A434AC-2190-4E12-BECA-A77DB9DE7169"
            },
            {
              "target": "$VGW",
              "port": "rtb-tgt",
              "line": "B50348D9-797E-46FF-99CE-6C0460480492"
            },
            {
              "target": "$ENI1",
              "port": "rtb-tgt",
              "line": "94DD35D3-0EA5-4932-BC21-C4CE4E8291C9"
            },
            {
              "target": "$SUBNET2",
              "port": "rtb-src",
              "line": "5B03ECF5-C3F0-45FE-AB17-2650CCEE6D88"
            },
            {
              "target": "$SUBNET1",
              "port": "rtb-src",
              "line": "F5F203E4-6B77-4A08-B73F-9C29E2AE5ADD"
            }
          ],
          "type": "AWS.VPC.RouteTable",
          "uid": "$ROUTETABLE",
          "groupUId": "$VPC"
        },
        "$ELB": {
          "coordinate": [
            8,
            47
          ],
          "connection": [
            {
              "target": "$LAUNCH-CONFIGURATION",
              "port": "elb-sg-out",
              "line": "A2FD9CF0-DF6F-4E76-AB4F-E53E6D24425B"
            },
            {
              "target": "3E2E3F46-49C8-4541-A5F4-04D5219213A8",
              "port": "elb-sg-out",
              "line": "91CCE648-293F-45E4-B45A-5CB35D5C46B2"
            },
            {
              "target": "$INSTANCE",
              "port": "elb-sg-out",
              "line": "80447053-9AC3-4CBF-8B5B-60D254CB86F7"
            },
            {
              "target": "$SUBNET1",
              "port": "elb-assoc",
              "line": "0693B58C-3C96-40CB-A3B1-9DCFCCF2F541"
            },
            {
              "target": "$SUBNET2",
              "port": "elb-assoc",
              "line": "F803512F-02FB-4EDF-93A9-965545F18581"
            }
          ],
          "type": "AWS.ELB",
          "uid": "$ELB",
          "groupUId": "$VPC"
        },
        "$LAUNCH-CONFIGURATION": {
          "virtualizationType": "paravirtual",
          "osFamily": "linux",
          "uid": "$LAUNCH-CONFIGURATION",
          "originalId": "$LAUNCH-CONFIGURATION",
          "groupUId": "$ASG",
          "coordinate": [
            30,
            34
          ],
          "connection": [
            {
              "target": "$ELB",
              "port": "launchconfig-sg",
              "line": "A2FD9CF0-DF6F-4E76-AB4F-E53E6D24425B"
            },
            {
              "target": "$INSTANCE",
              "port": "launchconfig-sg",
              "line": "29CCCE1E-36C0-43F1-A607-44CC495AD2EE"
            }
          ],
          "architecture": "i386",
          "rootDeviceType": "ebs",
          "type": "AWS.AutoScaling.LaunchConfiguration",
          "osType": "amazon"
        }
      },
      "group": {
        "E7187718-1D22-47E1-B4C6-F368AD95BCFF": {
          "uid": "E7187718-1D22-47E1-B4C6-F368AD95BCFF",
          "groupUId": "$VPC",
          "name": "us-east-1a",
          "coordinate": [
            23,
            17
          ],
          "type": "AWS.EC2.AvailabilityZone",
          "size": [
            36,
            31
          ],
          "connection": []
        },
        "3E2E3F46-49C8-4541-A5F4-04D5219213A8": {
          "uid": "3E2E3F46-49C8-4541-A5F4-04D5219213A8",
          "originalId": "$ASG",
          "groupUId": "$SUBNET2",
          "connection": [
            {
              "target": "$ELB",
              "port": "launchconfig-sg",
              "line": "91CCE648-293F-45E4-B45A-5CB35D5C46B2"
            },
            {
              "target": "$INSTANCE",
              "port": "launchconfig-sg",
              "line": "DA783FB7-5E14-4C8E-9554-5A6A7C2E4EA1"
            }
          ],
          "coordinate": [
            28,
            57
          ],
          "type": "AWS.AutoScaling.Group",
          "size": [
            13,
            13
          ]
        },
        "$ASG": {
          "uid": "$ASG",
          "originalId": "",
          "groupUId": "$SUBNET1",
          "connection": [],
          "coordinate": [
            28,
            31
          ],
          "type": "AWS.AutoScaling.Group",
          "size": [
            13,
            13
          ]
        },
        "D684877A-2EF5-4B80-AC22-3A211B45045E": {
          "uid": "D684877A-2EF5-4B80-AC22-3A211B45045E",
          "groupUId": "$VPC",
          "name": "us-east-1b",
          "coordinate": [
            23,
            53
          ],
          "type": "AWS.EC2.AvailabilityZone",
          "size": [
            36,
            21
          ],
          "connection": []
        },
        "$SUBNET1": {
          "uid": "$SUBNET1",
          "groupUId": "E7187718-1D22-47E1-B4C6-F368AD95BCFF",
          "connection": [
            {
              "target": "$ELB",
              "port": "subnet-assoc-in",
              "line": "0693B58C-3C96-40CB-A3B1-9DCFCCF2F541"
            },
            {
              "target": "$ROUTETABLE",
              "port": "subnet-assoc-out",
              "line": "F5F203E4-6B77-4A08-B73F-9C29E2AE5ADD"
            }
          ],
          "coordinate": [
            25,
            19
          ],
          "type": "AWS.VPC.Subnet",
          "size": [
            32,
            27
          ]
        },
        "$VPC": {
          "coordinate": [
            5,
            3
          ],
          "connection": [],
          "type": "AWS.VPC.VPC",
          "uid": "$VPC",
          "size": [
            59,
            73
          ]
        },
        "$SUBNET2": {
          "uid": "$SUBNET2",
          "groupUId": "D684877A-2EF5-4B80-AC22-3A211B45045E",
          "connection": [
            {
              "target": "$ROUTETABLE",
              "port": "subnet-assoc-out",
              "line": "5B03ECF5-C3F0-45FE-AB17-2650CCEE6D88"
            },
            {
              "target": "$ELB",
              "port": "subnet-assoc-in",
              "line": "F803512F-02FB-4EDF-93A9-965545F18581"
            }
          ],
          "coordinate": [
            25,
            55
          ],
          "type": "AWS.VPC.Subnet",
          "size": [
            32,
            17
          ]
        }
      }
    },
    "size": [
      240,
      240
    ],
    "connection": {
      "0EE2F884-BC0D-4793-9919-CB3C9732F25B": {
        "target": {
          "$INSTANCE": "instance-rtb",
          "$ROUTETABLE": "rtb-tgt"
        },
        "auto": true,
        "point": [],
        "type": "rtb-target"
      },
      "98A434AC-2190-4E12-BECA-A77DB9DE7169": {
        "target": {
          "$IGW": "igw-tgt",
          "$ROUTETABLE": "rtb-tgt"
        },
        "auto": true,
        "point": [],
        "type": "rtb-target"
      },
      "B50348D9-797E-46FF-99CE-6C0460480492": {
        "target": {
          "$VGW": "vgw-tgt",
          "$ROUTETABLE": "rtb-tgt"
        },
        "auto": true,
        "point": [],
        "type": "rtb-target"
      },
      "94DD35D3-0EA5-4932-BC21-C4CE4E8291C9": {
        "target": {
          "$ENI1": "eni-rtb",
          "$ROUTETABLE": "rtb-tgt"
        },
        "auto": true,
        "point": [],
        "type": "rtb-target"
      },
      "3BB564AC-0CE4-4271-B843-95C0ACBEF4CB": {
        "target": {
          "$CGW1": "cgw-vpn",
          "$VGW": "vgw-vpn"
        },
        "auto": true,
        "point": [],
        "type": "vpn"
      },
      "5B03ECF5-C3F0-45FE-AB17-2650CCEE6D88": {
        "target": {
          "$SUBNET2": "subnet-assoc-out",
          "$ROUTETABLE": "rtb-src"
        },
        "auto": true,
        "point": [],
        "type": "association"
      },
      "A2FD9CF0-DF6F-4E76-AB4F-E53E6D24425B": {
        "target": {
          "$LAUNCH-CONFIGURATION": "launchconfig-sg",
          "$ELB": "elb-sg-out"
        },
        "auto": true,
        "point": [],
        "type": "elb-sg"
      },
      "91CCE648-293F-45E4-B45A-5CB35D5C46B2": {
        "target": {
          "3E2E3F46-49C8-4541-A5F4-04D5219213A8": "launchconfig-sg",
          "$ELB": "elb-sg-out"
        },
        "auto": true,
        "point": [],
        "type": "elb-sg"
      },
      "80447053-9AC3-4CBF-8B5B-60D254CB86F7": {
        "target": {
          "$ELB": "elb-sg-out",
          "$INSTANCE": "instance-sg"
        },
        "auto": true,
        "point": [],
        "type": "elb-sg"
      },
      "0693B58C-3C96-40CB-A3B1-9DCFCCF2F541": {
        "target": {
          "$ELB": "elb-assoc",
          "$SUBNET1": "subnet-assoc-in"
        },
        "auto": true,
        "point": [],
        "type": "association"
      },
      "F803512F-02FB-4EDF-93A9-965545F18581": {
        "target": {
          "$ELB": "elb-assoc",
          "$SUBNET2": "subnet-assoc-in"
        },
        "auto": true,
        "point": [],
        "type": "association"
      },
      "0E2BEED8-072E-4EFB-B2DA-986C8806BA08": {
        "target": {
          "$ENI1": "eni-attach",
          "$INSTANCE": "instance-attach"
        },
        "auto": true,
        "point": [],
        "type": "attachment"
      },
      "40B99F23-CBDE-48E1-B71E-59DE2F7437A0": {
        "target": {
          "$CGW2": "cgw-vpn",
          "$VGW": "vgw-vpn"
        },
        "auto": true,
        "point": [],
        "type": "vpn"
      },
      "F5F203E4-6B77-4A08-B73F-9C29E2AE5ADD": {
        "target": {
          "$SUBNET1": "subnet-assoc-out",
          "$ROUTETABLE": "rtb-src"
        },
        "auto": true,
        "point": [],
        "type": "association"
      },
      "29CCCE1E-36C0-43F1-A607-44CC495AD2EE": {
        "target": {
          "$LAUNCH-CONFIGURATION": "launchconfig-sg",
          "$INSTANCE": "instance-sg"
        },
        "auto": true,
        "point": [],
        "type": "sg"
      },
      "DA783FB7-5E14-4C8E-9554-5A6A7C2E4EA1": {
        "target": {
          "3E2E3F46-49C8-4541-A5F4-04D5219213A8": "launchconfig-sg",
          "$INSTANCE": "instance-sg"
        },
        "auto": true,
        "point": [],
        "type": "sg"
      }
    }
  }
}