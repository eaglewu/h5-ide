Instance
{
    'type'                          :    Valid value, 'AWS.EC2.Instance', required,    # (format, value, not_empty)
    'name'                          :    regex name,^\w+[A-Za-z0-9-]*$, required,
    'state'                         :    Not necessary,
    'uid'                           :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                      :    {
        'InstanceId'                :    InstanceId regex , 'i-\w{8}', not required,
        'ImageId'                   :    AMI Id regex ,'ami-\w{8}', required,
        'KeyName'                   :    reference,@xxxx.resource.xxxx, required,
        'SecurityGroupId'           :    reference,@xxxx.resource.xxxx, required,
        'SecurityGroup'             :    Not necessary,
        'BlockDeviceMapping'        :    Not necessary,
        'Monitoring'                :    Valid value,['disabled','enabled'], required,
        'InstanceType'              :    Instance Type,  example:[t1.micro, m1.small...], required,
        'KernelId'                  :    Not necessary,
        'RamdiskId'                 :    Not necessary,
        'ShutdownBehavior'          :    Not necessary,
        'DisableApiTermination'     :    Not necessary,
        #'SourceDestCheck'           :    (ValueHandler.BOOL, '', False),
        'SubnetId'                  :    reference,@xxxx.resource.xxxx,or  regex subnet,subnet-\w{8}, not required,
        'VpcId'                     :    reference,@xxxx.resource.xxxx, or  regex vpc,vpc-\w{8}, not required,
        'PrivateIpAddress'          :    Not necessary,
        'Placement'                 :    {
            'AvailabilityZone'      :    regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required,
            'GroupName'             :    Not necessary,
            'Tenancy'               :    Valid value, ['dedicated', 'default'], not required,
        },
        'UserData'                  :    Not necessary,
        'EbsOptimized'              :    Valid value, ['true', 'false'], not required
        #'Platform'                  :    Not necessary

    },
    'software'                      :    Not necessary
}

EIP
{
    'type'                          :    Valid value, 'AWS.EC2.EIP', required,
    'name'                          :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                           :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                      :    {
        'PublicIp'                  :    regex IP, '\d+\.\d+\.\d+\.\d+', not required,
        'AllocationId'              :    regex AllocationId,'eipalloc-\w{8}', not required,
        'Domain'                    :    Valid value ,['vpc','standard'], not required,
        'InstanceId'                :    reference,@xxxx.resource.xxxx, not required,
        'AssociationId'             :    Not necessary,
        'NetworkInterfaceId'        :    reference,@xxxx.resource.xxxx, not required,
        'NetworkInterfaceOwnerId'   :    Not necessary,
        'AllowReassociation'        :    Not necessary,
        'PrivateIpAddress'          :    referenceeni ip,@xxxx.resource.xxxx, not required,
    }
 }

KeyPair
{
    'type'                      :    Valid value,'AWS.EC2.KeyPair', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'KeyName'               :    regex name,^\w+[A-Za-z0-9-]*$, required,
        'KeyFingerprint'        :    Not necessary
    }
}

SecurityGroup
{
    'type'                      :   Valid value,'AWS.EC2.SecurityGroup', required,
    'name'                      :   regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid'                       :   regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :   {
        "Default"               :   Not necessary,
        'OwnerId'               :   Not necessary,
        'GroupId'               :   regex SG ID,'sg-\w{8}', not required,
        'GroupName'             :   regex name,^\w+[A-Za-z0-9-]*$, required,
        'GroupDescription'      :   Not necessary,
        'VpcId'                 :   reference,@xxxx.resource.xxxx,or  regex vpc,vpc-\w{8}, not required,
        'IpPermissions'         :   {
                                        'IpProtocol'    :    Valid value,['tcp', 'udp', 'icmp', 6, 17, 1, -1, '6', '17', '1', '-1'], or  Int,>= -1, <= 65535, not required,
                                        'FromPort'      :    Int,>=-1, <=65535, not required,
                                        'ToPort'        :    Int,>= -1, <= 65535, not required,
                                        'IpRanges'      :    reference or  sg id or account number or ip range, required
                                    }
            ,
        'IpPermissionsEgress'   :   {
                                        'IpProtocol'    :    Valid value,['tcp', 'udp', 'icmp', 6, 17, 1, -1, '6', '17', '1', '-1'] or  Int,>= -1, <= 65535, not required,
                                        'FromPort'      :    Int,>= -1, <= 65535, not required,
                                        'ToPort'        :    Int,>= -1, <= 65535, not required,
                                        'IpRanges'      :    reference or  sg id or account number or ip range, required
                                    }
        }
}

tag
{
    'type'                      :    Valid value,'AWS.EC2.Tag', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
                                        'ResourceIds'       :    Not necessary,
                                        'Key'               :    string, required,
                                        'Value'             :    string, required
                                     }

}

Volume
{
    'type'                      :    Valid value,'AWS.EC2.EBS.Volume', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource':    {
        'VolumeId'              :    regex volume id,'vol-\w{8}', not required,
        'Size'                  :    INT, [1, 1024], required,
        'SnapshotId'            :    regex snapshot id,'snap-\w{8}', not required,
        'AvailabilityZone'      :    regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required,
        'Status'                :    Not necessary,
        'CreateTime'            :    Not necessary,
        'VolumeType'            :    Valid value,['standard', 'io1'], required,
        'Iops'                  :    INT, [100, 2000], not required,
        'AttachmentSet'         :    {
            'VolumeId'          :    regex volume id,'vol-\w{8}', not required,
            'InstanceId'        :    reference,@xxxx.resource.xxxx, required,
            'Device'            :    '/dev/sdf' etc., required,
            'Status'            :    Not necessary,
            'AttachTime'        :    Not necessary,
            'DeleteOnTermination'    :    Not necessary,
        }
    }
}

elb
{
    'type'                              :    Valid value, 'AWS.ELB', required,
    'name'                              :    regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid'                               :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                          :    {
        'AvailabilityZones'             :    regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required,
        'BackendServerDescriptions'     :   {
                                                'InstantPort'           :    INT, [0, 65535], not required,
                                                'PoliciyNames'          :    Not necessary
                                                #'KeyData'               :    Not necessary
                                            }
        ,
        'CanonicalHostedZoneName'       :    Not necessary,
        'CanonicalHostedZoneNameID'     :    Not necessary,
        'CreatedTime'                   :    Not necessary,
        'DNSName'                       :    Not necessary,
        'HealthCheck'                   :    {
                                                'HealthyThreshold'      :    INT, [2, 10], required,
                                                'Interval'              :    INT, [30, 300], required,
                                                'Target'                :    Not necessary,
                                                'Timeout'               :    INT, [2, 60], required,
                                                'UnhealthyThreshold'    :    INT, [2, 10], required
                                             },
        'Instances'                     :    {
                                                'InstanceId'    :    reference,@xxxx.resource.xxxx, required
                                             }
        ,
        'ListenerDescriptions'          :    {
                                                'Listener'              :    {
                                                                                'InstancePort'      :    INT, [0, 65535], required,
                                                                                'InstanceProtocol'  :    Valid value,['TCP','HTTP','HTTPS','SSL'], not required,
                                                                                'LoadBalancerPort'  :    INT, [0, 65535], required,
                                                                                'Protocol'          :    Valid value,['TCP','HTTP','HTTPS','SSL'], required,
                                                                                'SSLCertificateId'  :    reference, not required
                                                                             },
                                                'PolicyNames'           :    Not necessary
                                             }
        ,
        'LoadBalancerName'              :    regex name,^\w+[A-Za-z0-9-]*$, required,
        'Policies'                      :    {
                                                'AppCookieStickinessPolicies'       :   {
                                                                                            'CookieName'                :    Not necessary,
                                                                                            'PolicyName'                :    Not necessary
                                                                                        }
                                                ,
                                                'LBCookieStickinessPolicies'        :   {
                                                                                            'CookieExpirationPeriod'    :    Not necessary,
                                                                                            'PolicyName'                :    Not necessary
                                                                                        }
                                                ,
                                                'OtherPolicies'                     :   {
                                                                                            'PolicyName'                : Not necessary,
                                                                                            'PolicyTypeName'            :    Not necessary,
                                                                                            'PolicyAttributes'          :    {
                                                                                                'AttributeName'         :    Not necessary,
                                                                                                'AttributeValue'        :    Not necessary
                                                                                            },
                                                                                            'LoadBalancerName'          :    Not necessary
                                                                                        }

                                            },
        'Scheme'                        :    Valid value,['internal','internet-facing'], not required,
        'SecurityGroups'                :    reference,@xxxx.resource.xxxx, not required,
        'SourceSecurityGroup'           :    {
                                                'GroupName'     :    Not necessary,
                                                'OwnerAlias'    :    Not necessary
                                             },
        'Subnets'                       :    [reference,@xxxx.resource.xxxx, not required,regex subnet,subnet-\w{8}, not required],
        'VpcId'                         :    [reference,@xxxx.resource.xxxx, not required,regex vpc,vpc-\w{8}, not required]

    }
}


servercertificate
{
    'type'                  :    Valid value,'AWS.IAM.ServerCertificate', required,
    'name'                  :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                   :    regex uid,
    'resource'              :    {
                                    'CertificateBody'           :    Not necessary,
                                    'CertificateChain'          :    Not necessary,
                                    'PrivateKey'                :    Not necessary,
                                    'ServerCertificateMetadata' :    {
                                                                        'Arn'                   :    Not necessary,
                                                                        'Path'                  :    Not necessary,
                                                                        'ServerCertificateId'   :    Not necessary,
                                                                        'ServerCertificateName' :    Not necessary,
                                                                        'UploadDate'            :    Not necessary
                                                                     }
                                 }
}

subscription
{
    'type': Valid value,'AWS.SNS.Subscription', required,
    'name': regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid' : regex uid,
    'resource': {
        'Endpoint': http,email, sms  etc., required,
        'TopicArn': referenceTopicArn, required,
        'Protocol': https,http, sms, email, email-json  etc., required,
        'DeliveryPolicy': Not necessary,
        'SubscriptionArn': Not necessary
    }

}

topic
{
    'type': Valid value,'AWS.SNS.Topic', required,
    'name': regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid': regex uid,
    'resource': {
        'Name': regex name, required,
        'TopicArn': Not necessary,
        'Policy': Not necessary,
        'DisplayName': regex name, required,
        'DeliveryPolicy': Not necessary
    }
}

vpc
{
    'type'                      :    Valid value,'AWS.VPC.VPC', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'VpcId'                 :    regex vpc,vpc-\w{8}, not required,
        'State'                 :    Not necessary,
        'CidrBlock'             :    regex IP range, '\d+\.\d+\.\d+\.\d+/\d+', required,
        'DhcpOptionsId'         :    reference,@xxxx.resource.xxxx,or  Valid value,'default', not required,
        'InstanceTenancy'       :    Valid value ,['default','dedicated'], required,
        'IsDefault'             :    Not necessary,
        'EnableDnsSupport'      :    Valid value, ['true', 'false'], not required,
        'EnableDnsHostnames'    :    Valid value, ['true', 'false'], not required,
    }
}

cgw
{
    'type'                      :    Valid value,'AWS.VPC.CustomerGateway', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'CustomerGatewayId'     :    regex CGW,'cgw-\w{8}', not required,
        'State'                 :    Not necessary,
        'Type'                  :    Valid value,'ipsec.1', not required,
        'IpAddress'             :    regex IP,'\d+\.\d+\.\d+\.\d+', required,
        'BgpAsn'                :    INT, [1, 4294967295], not required,
    }
}

dhcp
{
    'type'                      :    Valid value,'AWS.VPC.DhcpOptions', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'DhcpOptionsId'         :    regex DHCP,'dopt-\w{8}', not required,
        'VpcId'                 :    reference,@xxxx.resource.xxxx, required,
        'DhcpConfigurationSet'  :    {
            'Key'               :    domain-name-servers, domain-name etc., required,
            'ValueSet'          :
                {
                    'Value'     :    IP, dns name etc., required
                }
        }
    }
}

igw
{
    'type'                      :    Valid value,'AWS.VPC.InternetGateway', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'InternetGatewayId'     :    regex igw,'igw-\w{8}', not required,
        'AttachmentSet'         :    {
                                        'VpcId'        :    reference,@xxxx.resource.xxxx, required,
                                        'State'        :    Not necessary
                                     }
    }
}

acl
{
    'type'                      :    Valid value,'AWS.VPC.NetworkAcl', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'NetworkAclId'          :    regex ACL,'acl-\w{8}', not required,
        'VpcId'                 :    reference,@xxxx.resource.xxxx, required,
        'Default'               :    Valid value, ['true', 'false'], required,
        'EntrySet'              :    {
                'RuleNumber'    :    INT, [1, 32767], required,
                'Protocol'      :    INT, [-1, 255], required,
                'RuleAction'    :    Valid value, ['allow','deny'], required,
                'Egress'        :    Valid value, ['true', 'false'], required,
                'CidrBlock'     :    regex IP range,'\d+\.\d+\.\d+\.\d+/\d+', or  reference,@xxxx.resource.xxxx, required,
                'IcmpTypeCode'  :    {
                    'Code'      :    INT, [-1, 40], not required,
                    'Type'      :    INT, [-1, 255], not required
                },
                'PortRange'     :    {
                    'From'      :    INT, [0, 65535], not required,
                    'To'        :    INT, [0, 65535], not required
                }
            }
        ,
        'AssociationSet'        :    {
            'NetworkAclAssociationId'       :    Not necessary,
            'NetworkAclId'                  :    regex ACL,'acl-\w{8}', not required,
            'SubnetId'                      :    reference,@xxxx.resource.xxxx, required
        }

    }
}

eni
{
    'type'                      :    Valid value,'AWS.VPC.NetworkInterface', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'NetworkInterfaceId'    :    regex  eni id,'eni-\w{8}', not required,
        'SubnetId'              :    reference,@xxxx.resource.xxxx, or  regex subnet,subnet-\w{8}, not required,
        'VpcId'                 :    reference,@xxxx.resource.xxxx, or  regex vpc,vpc-\w{8}, not required,
        'AvailabilityZone'      :    regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required,
        'Description'           :    Not necessary,
        'OwnerId'               :    Not necessary,
        'RequestId'             :    Not necessary,
        'RequestManaged'        :    Not necessary,
        'Status'                :    Not necessary,
        'PrivateIpAddress'      :    regex IP,'\d+\.\d+\.\d+\.\d+', not required,
        'PrivateDnsName'        :    Not necessary,
        'SourceDestCheck'       :    Valid value, ['true', 'false'], required,
        'MacAddress'            :    Not necessary,
        'SecondPriIpCount'      :    INT, [0, 16], not required,
        'GroupSet'              :    {
                                        'GroupId'               :    reference,@xxxx.resource.xxxx, required,
                                        'GroupName'             :    reference,@xxxx.resource.xxxx, not required
                                     }
        ,
        'Attachment'            :    {
            'AttachmentId'      :    Not necessary,
            'InstanceId'        :    reference,@xxxx.resource.xxxx, required,
            'DeviceIndex'       :    INT, [0, 32], required,
            'AttachTime'        :    Not necessary
        },
        'PrivateIpAddressSet'   :    {
                                        'PrivateIpAddress'      :    regex IP,'\d+\.\d+\.\d+\.\d+', not required,
                                        #'PrivateDnsName'        :    Not necessary,
                                        'AutoAssign'            :    Valid value, ['true', 'false'], not required,
                                        'Primary'               :    Valid value, ['true', 'false'], required,
                                        'Association'           :    {
                                            'PublicIp'          :    Not necessary,
                                            'PublicDnsName'     :    Not necessary,
                                            'InstanceId'        :    Not necessary,
                                            'IpOwnerId'         :    Not necessary,
                                            'AssociationID'     :    Not necessary,
                                            'AllocationID'      :    Not necessary
                                        }
                                     },

    }
}

rt
{
    'type'                      :    Valid value,'AWS.VPC.RouteTable', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'RouteTableId'          :    regex RT id,'rtb-\w{8}', not required,
        'VpcId'                 :    reference,@xxxx.resource.xxxx, required,
        'RouteSet'              :    {
                                        'DestinationCidrBlock'          :    regex IP range,'\d+\.\d+\.\d+\.\d+/\d+', required,
                                        'GatewayId'                     :    reference,@xxxx.resource.xxxx,or  Valid value,'local', not required,
                                        'InstanceId'                    :    reference,@xxxx.resource.xxxx, not required,
                                        'InstanceOwnerId'               :    Not necessary,
                                        'NetworkInterfaceId'            :    reference,@xxxx.resource.xxxx, not required,
                                        'State'                         :    Not necessary,
                                        'Origin'                        :    Not necessary
                                     }
        ,
        'AssociationSet'        :    {
                                        'RouteTableAssociationId'       :    Not necessary,
                                        'RouteTableId'                  :    Not necessary,
                                        'SubnetId'                      :    reference,@xxxx.resource.xxxx, not required,
                                        'Main'                          :    Valid value, ['true', 'false'], not required
                                     }
        ,
        'PropagatingVgwSet'     :   reference,@xxxx.resource.xxxx, not required
    }
}

subnet
{
    'type'                      :    Valid value,'AWS.VPC.Subnet', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'SubnetId'              :    regex subnet,subnet-\w{8}, not required,
        'State'                 :    Not necessary,
        'VpcId'                 :    reference,@xxxx.resource.xxxx, required,
        'CidrBlock'             :    regex IP range,'\d+\.\d+\.\d+\.\d+/\d+', required,
        'AvailableIpAddressCount'   :    Not necessary,
        'AvailabilityZone'          :    regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required
    }
}

vpn
{
    'type'                      :    Valid value, 'AWS.VPC.VPNConnection', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'VpnConnectionId'       :    regex VPN ID, 'vpn-\w{8}', not required,
        'State'                 :    Not necessary,
        'CustomerGatewayConfiguration'    :    Not necessary,
        'Type'                  :    Valid value, 'ipsec.1', not required,
        'CustomerGatewayId'     :    reference,@xxxx.resource.xxxx, required,
        'VpnGatewayId'          :    reference,@xxxx.resource.xxxx, required,
        'VgwTelemetry'          :    {
                                        'OutsideIpAddress'  :    Not necessary,
                                        'Status'            :    Not necessary,
                                        'LastStatusChange'  :    Not necessary,
                                        'StatusMessage'     :    Not necessary,
                                        'AcceptRouteCount'  :    Not necessary
                                     },
        'Options'               :    {
                                        'StaticRoutesOnly'  :    Valid value, ['true', 'false'], required
                                     },
        'Routes'                :    {
                                        'DestinationCidrBlock'    :    regex IP range,'\d+\.\d+\.\d+\.\d+/\d+', required,
                                        'Source'        :    Not necessary,
                                        'State'         :    Not necessary
                                     }
    }
}

vgw
{
    'type'                      :    Valid value,'AWS.VPC.VPNGateway', required,
    'name'                      :    regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid'                       :    regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource'                  :    {
        'VpnGatewayId'          :    regex VGW id,'vgw-\w{8}', not required,
        'State'                 :    Not necessary,
        'Type'                  :    Valid value,'ipsec.1', not required,
        'AvailabilityZone'      :    regex AZ,^(ap|us|eu|sa){1}-(south|east|west|north){1,2}-[0-9]{1}[a-z]{1}$, required,
        'Attachments'           :    {
                                        'VpcId'        :    reference,@xxxx.resource.xxxx, required,
                                        'State'        :    Not necessary
                                     }

    }
}

cloudwatch
{
    'type': Valid value, 'AWS.CloudWatch.CloudWatch', required,
    'name': regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid': None,
    'resource': {
        'ActionEnabled': Not necessary,
        'AlarmActions': Not necessary,
        'AlarmArn': Not necessary,
        'AlarmConfigurationUpdatedTimestamp': Not necessary,
        'AlarmDescription': Not necessary,
        'AlarmName': regex name, required,
        'ComparisonOperator': Valid value,['<=','<','>','>='], not required,
        'Dimensions':
            {
                'name': Valid value,['AutoScalingGroupName'], required,
                'value': reference, required
            }
        ,
        'EvaluationPeriods': INT, [1, 86400], not required ,
        'InsufficientDataActions': reference, not required,
        'MetricName': regex name, required,
        'Namespace': Valid value, ['AWS/AutoScaling', 'AWS/EC2', 'AWS/ELB'], required,
        'OKAction': reference, not required,
        'Period': INT, [1, 86400], not required,
        'StateReason': Not necessary,
        'StateReasonData': Not necessary,
        'StateUpdateTimestamp':Not necessary,
        'StateValue': Not necessary,
        'Statistic': Valid value,['Average', 'SampleCount', 'Sum', 'Minimum', 'Maximum'], required,
        'Threshold': corresponding value, example:int, required,
        'Unit': Not necessary
    }
}

autoscalinggroup
{
    'type': Valid value,'AWS.AutoScaling.Group', required,
    'name': regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid': regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource': {
        'AutoScalingGroupARN': regex ARN, ^arn:aws:\w+:[a-zA-Z0-9-]*:[0-9]*:, not required,
        'AutoScalingGroupName': regex name,^\w+[A-Za-z0-9-]*$, required,
        'AvailabilityZones': Not necessary,
        'CreatedTime': Not necessary,
        'DefaultCooldown': INT, [0, 86400], not required,
        'DesiredCapacity': INT, [0, 65534], not required,
        'EnabledMetrics':
            {
                'Granularity': Not necessary,
                'Metric': Not necessary
            }
        ,
        'HealthCheckGracePeriod': INT, [0, 86400], not required,
        'HealthCheckType': Valid value,['EC2','ELB'], not required,
        'LaunchConfigurationName': reference, required,
        'LoadBalancerNames': reference,　not required,
        'MaxSize': INT, [0, 65534], required,
        'MinSize': INT, [0, 65534], required,
        'PlacementGroup': Not necessary,
        'Status': Not necessary,
        'SuspendedProcesses':
            {
                'ProcessName': Not necessary,
                'SuspensionReason': Not necessary
            }
        ,
        'TerminationPolicies':
            Valid value,['OldestInstance', 'NewestInstance', 'OldestLaunchConfiguration', 'ClosestToNextInstanceHour', 'Default'], not required
        ,
        'VPCZoneIdentifier': Not necessary
    }

}

launchconfiguration
{
    'name': regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid': regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'type': Valid value,'AWS.AutoScaling.LaunchConfiguration', required,
    'resource': {
        'BlockDeviceMapping':
            {
                'DeviceName' :  example:'/dev/sdf', required

             }
        ,
        'CreatedTime': Not necessary,
        'EbsOptimized': Valid value, ['true', 'false'], not required,
        'IamInstanceProfile': Not necessary,
        'ImageId': regex AMI, ^ami-\w{8}$, required,
        'InstanceMonitoring': Valid value, ['true', 'false'], not required,
        'InstanceType': required,
        'KernelId': Not necessary,
        'KeyName': reference, not required,
        'LaunchConfigurationARN': regex LC, ^arn:aws:\w+:[a-zA-Z0-9-]*:[0-9]*:, not required,
        'LaunchConfigurationName': regex name,^\w+[A-Za-z0-9-]*$, required,
        'RamdiskId': Not necessary,
        'SecurityGroups': reference, required,
        'SpotPrice': Not necessary,
        'UserData': Not necessary
    }
}

notificationconfiguration
{
    'type': Valid value,'AWS.AutoScaling.NotificationConfiguration', required,
    'name': regex name,^\w+[A-Za-z0-9-]*$, not required,
    'uid': regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource': {
        'AutoScalingGroupName': reference, required,
        'NotificationType': Valid value, ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR', 'autoscaling:TEST_NOTIFICATION'], required,
        'TopicARN': reference, required
    }
}

scalingpolicy
{
    'type': Valid value,'AWS.AutoScaling.ScalingPolicy', required,
    'name': regex name,^\w+[A-Za-z0-9-]*$, required,
    'uid': regex UID,^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$, required,
    'resource': {
        'AdjustmentType': Valid value,['ChangeInCapacity', 'ExactCapacity', 'PercentChangeInCapacity'], required,
        'AutoScalingGroupName': reference, required,
        'Cooldown': INT, [0, 86400], not required,
        'MinAdjustmentStep': INT, [-65534, 65534], not required,
        'PolicyARN': regex ARN, not required,
        'PolicyName': regex name,^\w+[A-Za-z0-9-]*$, required,
        'ScalingAdjustment': INT, [-65534, 65534], required
    }
}